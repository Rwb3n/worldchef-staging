WorldChef MVP: Foundational Technology & Strategy Summary

Project Goal: 
To rapidly develop a high-quality, mobile-first recipe and meal-planning platform (WorldChef) with creator monetization, leveraging AI-assisted development within a constrained weekly capacity.

Guiding Principles for MVP Technology Choices:
Speed & Efficiency: 
Prioritize tools and strategies that enable rapid MVP development.
User Experience: 
Focus on a high-quality, performant mobile application.
Scalability & Maintainability: 
Choose foundations that support future growth and are easy to manage.
Cost-Effectiveness: 
Operate within defined budget constraints, especially for infrastructure.
Evidence-Based Decisions: 
Validate critical assumptions through focused Proof-of-Concepts (PoCs).

Key Architectural Decisions & Rationale:
Mobile Application Platform: 
To Be Determined by Comparative PoC (Flutter vs. React Native)
What: We will build Proof-of-Concepts (PoCs) using both Flutter and React Native (with its New Architecture) for core media-heavy screens.
Why: Both are leading cross-platform solutions. Given our media-rich content and the significant role of AI in code generation, a direct comparison is essential to pick the stack that best delivers performance, AI development efficiency, and high-quality UX for WorldChef. This data-driven approach minimizes risk before full-scale development. (Ref: ADR-WCF-001a)

Initial UI/UX Validation & Foundation: 
Direct Mobile Stack Development
What: Once the mobile platform (Flutter or React Native) is chosen, initial UI/UX validation and foundational coding (core components, navigation, theming, basic offline/accessibility/performance stubs) will occur directly in that chosen mobile stack. We will use tools like Figma for design, and Storybook/Widgetbook for component development.
Why: This ensures all early effort directly contributes to the final product, provides the most accurate validation of mobile UX, and avoids the inefficiencies of building a separate web prototype that doesn't perfectly translate to mobile. (Ref: ADR-WCF-025)

Backend API Server: 
Fastify (Node.js/TypeScript)
What: A custom API server built with Fastify will handle core business logic, orchestrate data, and manage third-party integrations (like payments).
Why: Fastify is chosen for its high performance, alignment with our JavaScript/TypeScript stack (good for AI code generation and team skills), and its ability to provide a stable, controlled API contract for the mobile app. For MVP, this will be our primary custom backend service. (Ref: ADR-WCF-003)

Database & Backend-as-a-Service (BaaS): 
Supabase (PostgreSQL)
What: We will use Supabase, which provides a PostgreSQL database along with integrated services for Authentication (user logins), Storage (for images), and potentially simple serverless functions (Edge Functions).
Why: Supabase significantly accelerates MVP backend development by providing these critical services out-of-the-box. PostgreSQL is a powerful relational database well-suited for our data. This choice is contingent on PoCs (early Cycle 1) validating its performance and cost-effectiveness for our projected MVP scale (target <$75-100/month at 10k active users). (Ref: ADR-WCF-001d)

Data Modeling: 
Relational Core with Targeted JSON for Flexibility
What: Core data (Users, Creators, Recipes, Likes, Collections, Follows) will use a structured relational model in PostgreSQL for integrity and powerful querying. Specific fields within recipes like ingredient lists (for display only, search via normalized ingredients table), steps, and nutrition facts will use flexible JSONB.
Why: This hybrid approach provides data integrity and strong query capabilities for core relationships and search (especially ingredients), while offering flexibility for variable content like recipe steps. (Ref: ADR-WCF-006a, ADR-WCF-006b)

Key Supporting Strategies (High-Level):
Authentication: 
Supabase Auth for user identity, with JWTs validated by our Fastify API. (Ref: ADR-WCF-005)
Payments: 
Stripe Hosted Checkout for MVP subscriptions to maximize security (PCI compliance) and speed of integration. (Ref: ADR-WCF-007)
Search (MVP): 
PostgreSQL's built-in Full-Text Search and similarity tools for initial recipe/creator search. (Ref: ADR-WCF-008)
Push Notifications (MVP): 
Firebase Cloud Messaging (FCM) for cross-platform delivery. (Ref: ADR-WCF-009)
API Design: 
Standardized REST-like principles with clear versioning. (Ref: ADR-WCF-015)
Testing & CI/CD: 
Comprehensive, automated testing at multiple levels (unit, integration, E2E) and automated builds/deployments via GitHub Actions. (Ref: ADR-WCF-010a, ADR-WCF-010b, ADR-WCF-011)

Risk Management & Next Steps:
Our strategy explicitly incorporates Proof-of-Concepts for the riskiest assumptions (mobile stack performance, BaaS performance/cost). 

The outcomes of these PoCs will finalize key technology choices and ensure we proceed on a validated foundation. 

The initial development phase will focus on building core components and validating critical user flows directly in the chosen mobile stack.

We are confident this approach balances rapid MVP development with the foundational quality needed for WorldChef's success.

