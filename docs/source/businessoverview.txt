
Where you stand right now (13-06-2025)
Area
Current status
Proof-point
Mobile stack
Flutter 3.x chosen and already scaffolded
PoC-1 results in ADR-001a show clear perf/DX win
Early UI/UX foundation
MVF component library & navigation delivered; designs version-locked
ADR-025 VALIDATED
State management
Riverpod-based strategy validated end-to-end
ADR-004 VALIDATED after PoC-3
Data tier & BaaS
Supabase adopted; performance, RLS and cost all within targets
ADR-001d PoC score 88.5 %
Backend shape
Fastify-first service, with DB-queue + Edge-Function worker pattern proven
ADR-003 VALIDATED (Edge warm 443 ms; optimisation pending)
Key cross-cutting ADRs
Auth (005), Push (009), Payments (007), Search (008), API-versioning (015), Test-philosophy (010a/b), CI/CD (011) all ACCEPTED
e.g. auth , push , CI/CD

You’ve validated the big architectural bets; now it’s execution time.
 Below is a six-week “Cycle 4” playbook that turns the ADR library into shippable software and positions you for a closed-beta.
Six-Week Cycle 4 & Beta Readiness: Business Overview
Objective
Prepare the product for closed‑beta with clear milestones, minimal technical jargon, and business‑focused outcomes.

Initiating Cycle 4: Kickoff Activities
Objective: Align teams, clarify scope, and set up processes before Week 0.
Key Actions & Next Steps:
Stakeholder Kickoff Meeting


When: Day 1 of Cycle 4 kickoff week


Who: Executive sponsor, Product Owner, Tech Lead, UX Lead, QA Lead, Marketing Lead


Agenda: Review six-week roadmap, define success metrics, identify risks and dependencies


Output: Signed-off project charter and risk register


Team Assignments & Roles


Action: Publish RACI matrix with named resources for each squad (Backend, Mobile, QA, Support)


Deadline: End of kickoff week


Deliverable: Shared org chart and team contact list


Scope Freeze Confirmation


Action: Distribute final MVP feature list and API/screen coverage matrix document


Approval: Formal sign-off from Design and Business leads via email or collaboration tool


Deliverable: Versioned scope document accessible to all stakeholders


Environment & Tooling Setup


Checklist: Access to staging environment, CI/CD pipeline health check, test automation suites integrated, monitoring dashboard access


Owner: DevOps Engineer


Verification: Smoke test deployment and sample test suite executed by end of Week 0


Staging Environment Definition:


Infrastructure: Dedicated staging namespace/clusters matching production architecture (Fastify servers, Supabase Postgres, edge-functions, search-index nodes)


Configuration: Uses staging-specific environment variables, feature-flag toggles disabled by default, payment hooks pointed to Stripe test mode


Data: Synthetic dataset seeded daily reflecting representative user and recipe data; scrubbed PII


Access Control: VPN or SSO-restricted access; separate credentials from production


CI/CD Integration: Automatic deployment from staging branch on merge; rollback strategy via GitHub Actions


Monitoring & Alerts: Resource usage, error rates, and performance metrics sent to dashboard; critical alerts routed to on-call Slack channel


Domain & SSL: staging.worldchef.example.com with trusted TLS certificates managed by DevOps


Communication Cadence


Standing Meetings:


Daily squad stand-ups (15 min)


Weekly cross-functional status review (30 min)


Biweekly leadership sync (60 min)


Channels: Dedicated Slack/Teams channel, Confluence project page for documentation




Phase 0a: Freeze & Align (Week 0)
Goal: Lock scope and ensure business/design alignment
MVP Feature Set & User Flows
Feature Set:


User Onboarding – Sign-up, login/logout, password reset


Recipe Feed – Paginated list of public recipes with filtering (cuisine, dietary tags)


Recipe Detail – View ingredients, steps, nutritional info; like/favorite


Recipe Creation – Form-based recipe submission with image upload and JSONB ingredient modeling


Payments – One-time purchase checkout flow via Stripe stub


Search – Full-text search over titles and ingredients with typo tolerance


Push Notifications – Opt-in prompt, token registration, deep-linking to recipe detail


User Flows:


Onboarding Flow: Launch app → Sign-up/login screen → Email verification → Home feed


Discovery Flow: Home feed → Search input → Filter application → Recipe detail → Like/favorite


Creation Flow: Tap “Create” → Recipe form → Preview → Submit → Confirmation screen


Purchase Flow: Recipe behind paywall → Tap “Buy” → Checkout screen → Confirmation → Access granted


Engagement Flow: Grant push permission → Receive notification → Tap notification → Navigate to recipe detail


MVP Feature to API Endpoint Mapping:
Feature
API Endpoint
Method
Notes
User Onboarding
POST /v1/auth/signup
POST
Creates user account


POST /v1/auth/login
POST
Returns JWT


POST /v1/auth/logout
POST
Invalidates token
Recipe Feed
GET /v1/recipes
GET
Supports pagination & filters
Recipe Detail
GET /v1/recipes/{recipeId}
GET
Includes nutritional info & stats
Recipe Creation
POST /v1/recipes
POST
Accepts JSONB payload + multipart
Payments
POST /v1/payments/checkout
POST
Stripe checkout-session stub
Search
GET /v1/search?query={q}
GET
Full-text search with typo tolerance
Push Notifications
POST /v1/users/me/device-tokens
POST
Registers device token


POST /v1/notifications
POST
Sends test notification

Phase 1: Backend Validation & Delivery (Weeks 1–3)
Objective: Validate and deliver foundational backend systems, including Fastify architecture, payment flow, and push notifications.
Week 1 Validation Track:
Fastify POC: Deploy hello-world endpoint; validate JSON schema handling; run k6 test at 100 VU (target p95 ≤200 ms)
Stripe Flow POC: Create test checkout session; capture webhook and verify signature integrity
Push Notification POC: Register token from test device; deliver push within 3 seconds
Validation Sign-off: Executive Sponsor to approve tech validation checklist by end of Week 1 Build and validate core server-side capabilities.
Week 1 Milestones:
Monday: Environment provisioning completed (staging DB, Fastify baseline)
Wednesday: Auth middleware and RBAC flows implemented (signup/login/logout)
Friday: CI pipeline gating on unit tests (≥80% coverage)
Week 2 Milestones:
Tuesday: CRUD endpoints for Users & Recipes coded with RLS policies
Thursday: Background job table & edge-worker stub deployed; initial latency measurement
Week 3 Milestones:
Monday: Payment stub integrated (Stripe checkout-session + webhook)
Wednesday: Search index provisioned & /internal/reindex endpoint live
Friday: End-to-end backend smoke tests green in staging
Key Deliverables & Owners:
Auth & RBAC (Tech Lead) → validated via integration tests
Recipes API (Backend Squad) → demo-ready Postman collection
Payments & Webhooks (Payment Engineer) → happy-path demo
Search & Notifications (Infra Engineer) → index health report

Phase 2: Mobile App Implementation (Weeks 2–4)
Objective: Deliver polished mobile experiences for core journeys.
Week 2 Milestones:
Wednesday: Networking layer wired with token refresh logic


Friday: Home feed screen skeleton with pagination


Week 3 Milestones:
Tuesday: Recipe detail implemented with optimistic updates


Thursday: Checkout screen UI and mock payment flow


Week 4 Milestones:
Monday: Offline caching provider integrated; performance metrics logging


Wednesday: Push permission prompt & token registration


Friday: Golden widget tests passing for three screens


Key Deliverables & Owners:
Home & Feed UI (Mobile Lead) → interactive prototype on TestFlight


Detail & Likes (Feature Dev) → performance report (TTI <2s)


Checkout & Payment (Mobile Payments Dev) → staging demo


Push & Deep Links (Mobile Infra) → end-to-end notification test



Phase 3: Quality & Automation (Weeks 4–5)
Objective: Harden product via automation, performance, and security.
Week 4 Milestones:
Tuesday: CI fails on <80% backend or <70% Flutter coverage


Thursday: Nightly k6 performance baseline configured


Week 5 Milestones:
Monday: OWASP-ZAP security scan completed with zero critical issues


Wednesday: Automated E2E suite run end-to-end against staging


Friday: Internal TestFlight/Google track build available


Key Deliverables & Owners:
Test Coverage Reports (QA Lead) → summary dashboard


Performance Benchmarks (Performance Engineer) → p95 <200ms


Security Scan Report (Security Lead) → issue log with remediations



Phase 4: Beta Readiness Gate (Week 6)
Objective: Make go/no-go decision for closed-beta launch.
Key Checks (all by Thursday of Week 6):
 **Validation Gate** – Fastify, Payment, Push POCs signed off (Executive Sponsor)
**Latency Gate** – Edge-function p95 <300 ms (Infra Engineer)
**Stability Gate** – 7 days of nightly E2E green & <1 % 5xx (Ops Lead)
**Budget Gate** – Cost burn report under $75/month cap (Finance Analyst)
**DX Gate** – Survey results: ≥4 “easy to onboard” rating from 5 devs (Dev Advocate)


Outcome Paths:
Pass All: Publish beta invites and kickoff feedback channel


Fail Any: Rapid root-cause spike & scope adjustment, then re-evaluate next week



Success Metrics & Evaluation
Define how we’ll measure and report on each business success metric:
Metric
Target
Measurement & Frequency
Owner
Report To
Test Coverage
≥80% backend, ≥70% mobile
CI coverage report on every merge
QA Lead
Weekly status sync
API Performance
p95 ≤200 ms for validated Fastify endpoints
Nightly k6 benchmark runs
Performance Engineer
Weekly status sync
Fastify Spike
p95 ≤200 ms @ 100 VU 
 Spike report (Week 1)
 Tech Lead   
Immediate
Stripe/Webhook Success
100 % test checkout + webhook
POC script (Week 1)
 DevOps Engineer
Immediate
Push Delivery Time
p50 <3 s 
Device log (Week 1)
Mobile Lead 
Immediate
Stability (5xx errors)
<1% of requests
Nightly E2E results & error-rate alert
Ops Lead
Biweekly leadership
Budget Compliance
<$75/month platform costs
Monthly cost dashboard
Finance Analyst
Monthly review
Developer Experience (DX)
≥4/5 ease-of-onboard rating
Post-kickoff survey (week 6)
Dev Advocate
Closing workshop

Review Cadence:
Weekly: QA, performance, and stability updates in status call


Biweekly: Leadership review of latency and DX feedback


Monthly: Financial report against budget cap



Next Steps After Beta Launch
Roll out analytics and growth tracking


Plan internationalization and feature flags


Define observability stack and alert rules



Critical Dependencies
A clear understanding and mitigation plan for these dependencies is essential to keep Cycle 4 on track:
Stripe Payment Platform: Successful stub and later full integration for checkout and webhooks. Dependency on Stripe API version and network availability.
Supabase Backend Services: Reliant on Supabase auth, database (RLS) and edge-function hosting. Requires coordination with DevOps for provisioning and cost monitoring.
Search Index (Typesense/Meilisearch): Index setup and health depends on Infra Engineer availability and third-party service SLAs.
UX & Design Assets: Figma v1.0 screens must be locked; any design changes require triage to avoid scope creep.


CI/CD & Testing Tools: GitHub Actions runners, k6, OWASP-ZAP licenses/configurations must be in place before Week 1 throttles delivery.


Team Resource Availability: Key roles (Tech Lead, Mobile Lead, DevOps Engineer) must be committed for the full six weeks; identify backup resource where possible.



Summary for Business Team:
 This six‑week plan transforms validated architecture into a user‑ready beta product. Each phase has clear deliverables, status reporting, and go/no‑go criteria to manage risk and ensure on‑time delivery.




