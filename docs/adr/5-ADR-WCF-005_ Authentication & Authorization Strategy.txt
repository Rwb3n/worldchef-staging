ADR-WCF-005: Authentication & Authorization Strategy
Status: ACCEPTED
Date: 2025-06-01 (Final version incorporating comprehensive feedback on implementation details, security practices, operational considerations, and risk mitigation)
Authors: AI Dev Team
1. Context and Problem Statement
WorldChef requires a secure, reliable, and user-friendly system for user authentication (identity verification) and authorization (permission enforcement). All communication involving authentication tokens (client ↔ Supabase Auth, client ↔ Fastify API) must occur exclusively over HTTPS (TLS). Fastify will be configured to reject non-TLS requests in production environments.
Users must be able to sign up, log in (via email/password and social providers like Google, Apple, Facebook), manage sessions, and interact with protected API endpoints. The system must seamlessly integrate with Supabase Auth (ADR-WCF-001d) for identity management and the Fastify API Gateway (ADR-WCF-001c) for API-level access control, complemented by Supabase RLS for data-layer security. This ADR details this strategy, including critical implementation aspects for security, usability, and operations.
2. Decision Drivers
Security (Paramount): Robust protection against unauthorized access, session/token compromise, brute-force attacks. Secure management of secrets and tokens.
User Experience: Simple, intuitive, and reliable signup/login/password-reset flows, including seamless social logins. Clear error handling.
Integration & Leveraging Supabase Auth: Maximize use of Supabase's mature authentication capabilities.
Fastify API Gateway Control: Enable Fastify to validate user identity and enforce fine-grained API-level authorization.
Role-Based Access Control (RBAC - Initial): Clearly differentiate "user" and "creator" roles.
Development Velocity: Utilize proven solutions.
Standard Protocols: Adherence to JWT, OAuth 2.0.
Auditability & Monitoring: Log critical authentication events.
Session Management: Handle token lifecycle, including secure refresh token storage and basic invalidation.
Compliance: Consideration for data privacy regulations (GDPR/CCPA) related to user data.
3. Considered Options
(Primary options remain the same: 1. Supabase Auth + Fastify JWT Validation (Chosen), 2. Fastify as Full OAuth Server (Rejected), 3. Third-Party IdP (Rejected for MVP due to cost/complexity). The rationale for Option 1 is significantly strengthened below.)
4. Decision
Chosen Option: Option 1: Supabase Auth for User Management & JWT Issuance, with JWT Validation and Authorization in Fastify API Gateway.
Detailed Flow & Implementation Commitments:
Client-Side Authentication (React Native with 
All core auth operations (signup, login, password reset, etc.) handled by supabase-js with Supabase Auth.
Social Login Configuration: OAuth client IDs/secrets configured in Supabase Dashboard. Native app configurations (redirect URIs, universal/deep links) set up per platform.
Social Login Failures: If a social provider returns an error, the client UI must gracefully display a user-friendly message and offer fallback to email/password login or retry.
Social Account Linking: Supabase Auth links identities based on verified email addresses. If a social login provides an email already verified with another method for that user, it's typically linked. If an unverified email from social login matches an existing unverified email user, or if emails differ, separate accounts might be created. Manual merging of distinct accounts is MVP+; the focus is on Supabase's default linking for matching verified emails.
Refresh Token Security: supabase-js persists refresh tokens in platform-native secure storage (e.g., iOS Keychain / Android EncryptedSharedPreferences via Expo SecureStore).
Offline Auth State: supabase-js persists the session. Offline, the app uses this last known state. Upon regaining connectivity, the client must proactively refresh the session ( to validate the session before critical operations. Client UI should also monitor access token expires_at.

JWT Handling & API Requests:
Supabase Auth issues short-lived JWT Access Tokens (target 30-minute expiry for MVP) and long-lived refresh tokens.
Client includes JWT access token in Authorization: Bearer <token> header for protected Fastify API requests.

Fastify JWT Validation & Authentication:
Fastify middleware validates JWTs using Supabase's JWKS (JSON Web Key Set) URI to fetch and cache public keys for signature verification (avoiding shared secret).
Standard claims (iss, aud, exp) are validated. Validated JWT payload (containing sub (user_id), email, role, raw_app_meta_data, etc.) is attached to request.user.

Fastify Authorization Logic (RBAC):
User roles (e.g., user, creator) managed via custom claims in JWT, populated from Supabase's  (e.g., {"roles": ["user", "creator"]}).
raw_app_meta_data.roles updated by database triggers on relevant tables (e.g., creators table insert/delete updates roles). This approach is chosen for MVP simplicity, accepting potential trigger-related complexities. If issues arise, this will be refactored to explicit API endpoints in Fastify for role management.
Fastify checks request.user.raw_app_meta_data.roles for authorization. Role changes propagate on next JWT refresh.

Error Handling for Auth in Fastify:
Token Expired: 401 Unauthorized with {"error": "TOKEN_EXPIRED"}. Client must refresh via supabase-js.
Invalid/Malformed Token: 401 Unauthorized with {"error": "INVALID_TOKEN"}.
Refresh Token Expired/Revoked (Client-Side): If supabase.auth.refreshSession() fails, client must redirect to login.
Insufficient Permissions: 403 Forbidden with {"error": "INSUFFICIENT_PERMISSIONS"}.

Token Revocation & Session Invalidation:
MVP Strategy: Primarily rely on short JWT access token lifetimes (30 mins). For immediate account disabling, use Supabase Admin API: auth.admin.updateUserById(userId, { ban_duration: '...' }) to block new logins/refreshes, and auth.admin.signOut(user_jwt) to invalidate associated refresh tokens.
Near Real-Time Revocation (If Critical for MVP): If immediate revocation of active access tokens is essential for a specific MVP use case (e.g., instant suspension of creator rights), a simple server-side deny-list in Fastify (e.g., storing revoked user_ids in Redis or a DB table with a TTL of Access Token Lifetime + 5 minutes, checked by middleware) will be implemented. Entries are removed when revocation is lifted or TTL expires.

Rate Limiting & Brute-Force Protection:
Supabase Auth has built-in rate limiting.
Fastify will implement additional rate limiting (e.g., fastify-rate-limit):
Per-IP: Max 60 auth-related requests/minute to Fastify.
Per-User Account: Max 5 consecutive failed login attempts (tracked by Fastify, potentially via Redis/DB counter) before a 15-minute account cooldown. The strictest applicable limit takes effect. Thresholds monitored for NAT issues.


MFA Roadmap: Compatible with Supabase MFA (TOTP). Integration is MVP+, subject to future ADR.
Audit Trail & Logging: Critical auth events logged by Supabase Auth. Fastify logs API access, auth decisions, and errors with structured data and defined severity levels (details in ADR-WCF-021 Observability). Examples:
INFO: Successful login, token refresh success, logout.
WARN: Failed login attempt, expired token presented.
ERROR/SECURITY_NOTICE: Malformed token, signature validation failure, unauthorized access attempt.

5. Rationale
This strategy provides a secure, standards-based, and developer-friendly approach for WorldChef MVP by:
Leveraging Supabase Auth for robust identity management and JWT issuance.
Empowering Fastify with JWT validation for centralized API security and flexible authorization logic.
Employing defense-in-depth with Fastify checks and Supabase RLS.
Addressing key operational aspects like token lifecycle, error handling, rate limiting, and providing a path for revocation and MFA.
6. Consequences
Positive Consequences / Benefits:
Strong, reliable authentication leveraging a specialized BaaS.
Standardized, stateless JWT security for Fastify APIs.
Simplified client-side auth code. Clear roles for each system component.
Negative Consequences / Trade-offs / Risks:
Complexity of Social Login Native Setup: Requires careful platform-specific configuration.
DB Trigger Reliability for Roles: Chosen for MVP simplicity, but trigger failures or race conditions are a risk. (Mitigation: Monitoring; refactor to API if problematic).
JWT Lifecycle Nuances: Client and server must correctly handle all states. (Mitigation: Thorough testing, supabase-js for client).
Dependency on Supabase Auth Availability.
JWKS Key Rotation Handling: Fastify's JWKS key fetching/caching logic must correctly handle Supabase key rotations.
Compliance Considerations:
User PII collected via Supabase Auth and processed by Fastify must adhere to GDPR/CCPA. This includes clear consent, secure handling, and supporting user data rights (access, deletion – implemented as app features). Data residency options via Supabase will be utilized as appropriate.
7. Validation / Success Metrics
All auth flows (email/pass, social) successfully implemented and tested E2E, including client-side token refresh.
Fastify robustly protects APIs via JWT validation and role-based checks.
Performance PoC (Early Cycle 1): JWT validation in Fastify consistently performs < 5ms on average per request under projected MVP load.
Rate limiting effectively mitigates basic automated attack patterns.
Documented procedures for social login setup and key rotation are validated.
Security testing identifies no critical vulnerabilities in the auth/authz implementation.
8. Review / Revisit
After Cycle 1 & Initial Security Testing: Once core auth flows and protected APIs are operational.
If DB trigger-based role management proves problematic: Re-evaluate using dedicated API endpoints for role updates.
If near real-time token revocation becomes a frequent, critical need beyond simple user banning.
Before implementing MFA, or if advanced session management features (e.g., per-device revocation) are required.
Annually, to align with evolving security best practices and Supabase Auth capabilities.
Operational Considerations & Related ADRs:
Monitoring & Alerting: Covered by ADR-WCF-021 (Observability Strategy).
Key Rotation (JWKS): Fastify's JWKS client must cache keys respecting Cache-Control headers or use a short fixed TTL, with logic to refetch on unknown KIDs.
Disaster Recovery (Supabase Auth): App should degrade gracefully if Supabase Auth is temporarily unavailable. (Further DR in ADR-WCF-020).
CI/CD & Rollback: Auth configurations are version-controlled; rollback plans part of ADR-WCF-011.

