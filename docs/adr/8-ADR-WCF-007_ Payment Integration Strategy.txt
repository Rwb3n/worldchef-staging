ADR-WCF-007: Payment Integration Strategy
Status: ACCEPTED
Date: 2025-06-01 (Final version incorporating comprehensive feedback on SCA, taxes, idempotency, error handling, operational considerations, financial impact, and detailed subscription lifecycle management)
Authors: AI Dev Team
1. Context and Problem Statement
WorldChef aims to monetize through a single-tier monthly subscription, enabling access to premium features. A secure, reliable, compliant, and developer-friendly payment processing solution is essential for MVP (Cycle 2). This ADR documents the decision to use Stripe, specifically its "Hosted Checkout" product, and outlines key implementation, operational, compliance, and financial considerations for a production-ready system.
2. Decision Drivers
Security & PCI Compliance (Highest Priority): Drastically reduce PCI DSS scope.
Development Velocity for MVP: Rapid integration for Cycle 2.
User Experience: Familiar, trustworthy, mobile-friendly checkout and subscription management.
Subscription Management: Robust support for recurring billing, status tracking, lifecycle events (including SCA, dunning).
Global Reach & Compliance: Support for key markets, Strong Customer Authentication (SCA - Europe), and automated tax/VAT handling.
Developer-Friendly APIs & Documentation: For backend (Fastify) integration.
Cost-Effectiveness (MVP & Beyond): Transparent pricing, with financial modeling against project budget.
Mobile Integration: Seamless flow within React Native app.
Operational Readiness & Resilience: Clear processes for error handling, monitoring, reconciliation, and support.
3. Considered Options
(Primary options remain: 1. Stripe Hosted Checkout (Chosen), 2. Stripe Elements, 3. PayPal, 4. Other Providers. Rationale for Option 1 is further strengthened.)
4. Decision
Chosen Option: Option 1: Stripe with Stripe Hosted Checkout for implementing the initial single-tier monthly subscription.
Key Implementation, Operational & Compliance Commitments:
Backend (Fastify - ADR-WCF-001c):
POST /v1/subscriptions/checkout-session endpoint creates Stripe Checkout Session.
Idempotency: Requests must use an idempotency key (e.g., userId + '-' + uuid_v4()) passed in Idempotency-Key header to Stripe. Fastify should store/check this key briefly (e.g., Redis with short TTL, or DB) to prevent duplicate Stripe session creation on retries.
Session configured for recurring monthly price, success/cancel URLs (mobile deep links).
Strong Customer Authentication (SCA): Stripe Hosted Checkout automatically handles SCA requirements (e.g., 3D Secure). Client web view must correctly handle any SCA redirects and return flow.
Tax/VAT Handling: Stripe Tax will be enabled and configured to automatically calculate and add applicable taxes during Checkout based on customer location. Tax amounts recorded in ledger. Tax-exempt customers (e.g., nonprofits providing valid certificates) will be marked in Stripe (customer.tax_exempt = 'exempt') by Fastify API logic (e.g., via an admin/support endpoint), and certificates stored securely for audit.

Client (React Native - ADR-WCF-001a):
Calls Fastify to get Checkout Session URL, opens in expo-web-browser.
Handles success/cancel deep link redirects.
Error Handling: If Checkout URL fails to load, UI offers "Retry" and potentially "Open in external browser" as fallback.

Stripe Webhooks (Critical for State Sync):
Dedicated Fastify endpoint (POST /v1/webhooks/stripe). Signature Verification MANDATORY.
Idempotent Processing: Use Stripe event ID (evt_xxx) to prevent duplicate processing.
Key Events: checkout.session.completed, invoice.payment_succeeded, invoice.payment_failed, invoice.payment_paid, customer.subscription.updated, customer.subscription.deleted.
Failure Handling & Reconciliation: Stripe retries failed webhooks. A daily reconciliation job (e.g., Supabase Edge Function or Fastify scheduled task) will poll Stripe API (e.g., list recent subscriptions/invoices) to find and correct any discrepancies between local DB and Stripe state. Alerting for repeated webhook failures is essential (ADR-WCF-021).
Advanced Error Scenario (Webhook fails permanently after payment success): Manual reconciliation initiated by alerting will be the MVP process.


Subscription Lifecycle & User Communication:
Subscription Management UI: Implement a "Manage Subscription" screen in the React Native app. This screen will primarily provide a secure link to Stripe Customer Portal (generated via Stripe API by Fastify) where users can self-serve (update payment method, view invoices, cancel subscription).
Payment Failures/Past Due (Dunning):
Stripe Billing dunning settings configured to retry failed payments (e.g., 3 times over 7-10 days).
Customized email templates (via Stripe) for payment failure notifications.
Webhook invoice.payment_failed updates local status. Fastify triggers in-app notification/email to user, directing to Stripe Customer Portal to update payment method.
If dunning fails, customer.subscription.updated (to canceled or unpaid) webhook updates local status, revoking premium access.

Plan Changes/Proration (MVP+): For MVP, only a single tier exists. If future tiers or plan changes (e.g., monthly to annual) are introduced, Stripe Billing's subscription.update API with proration_behavior will be used, handling webhooks for invoice.created (for proration invoices).

Refunds & Trials:
Trials: A 7-day free trial for new subscribers configured via Stripe Checkout's subscription_data.trial_period_days.
Refunds: For MVP, refunds processed manually via Stripe Dashboard by authorized support staff. A documented internal workflow will define eligibility criteria (e.g., within X days, valid reason) and logging. If refund volume exceeds a threshold (e.g., 2% of monthly transactions), API-based refund processing will be prioritized.

Environments & API Keys:
Strict separation of Stripe Test/Live API keys and Webhook Secrets via environment variables (e.g., STRIPE_SECRET_KEY_TEST/LIVE), loaded based on NODE_ENV. No hardcoded keys.

Monitoring, Support & Testing:
Key metrics (conversion, success/failure rates, active subscriptions, churn due to payment, webhook health) monitored via Stripe Dashboard & application logs/metrics (ADR-WCF-021). Thresholds for alerts (e.g., >5% payment failures in 24h, >3 consecutive webhook failures for an event) will be defined.
Support process: Documented internal troubleshooting for common payment issues using Stripe Dashboard.
Testing: Comprehensive testing in Stripe Test Mode covering: successful payments, SCA flows (using Stripe test cards), payment failures, webhook processing, reconciliation job, subscription cancellations, and trial conversions. Webhook signature validation tested with Stripe CLI or ngrok in staging.

Data Privacy Compliance (GDPR/CCPA):
Customer payment data (name, email, billing address, last4 of card, subscription details) stored by Stripe is subject to their DPA.
WorldChef's handling of user data associated with subscriptions (locally stored user ID, subscription status, plan details) must comply. Users will be informed about data processing for payments in the Privacy Policy. Data access/deletion requests concerning payment history will be handled according to Stripe's capabilities and local record-keeping obligations.

5. Rationale
Stripe Hosted Checkout, augmented with Stripe Tax and Stripe Customer Portal, provides the most secure, compliant, feature-rich, and developer-friendly solution for WorldChef's MVP subscription needs, balancing rapid integration with operational robustness.
Maximized Security & Compliance: PCI, SCA, and basic tax handling are largely offloaded to Stripe.
Reduced Development Effort: Minimizes custom payment UI and complex subscription logic for MVP.
Operational Resilience: Idempotency, webhook verification, and reconciliation processes enhance reliability.
User Self-Service: Stripe Customer Portal empowers users to manage their subscriptions.
6. Consequences
Positive Consequences / Benefits:
Drastically reduced PCI scope; simplified SCA & tax compliance.
Fast time-to-market for a robust subscription system.
Secure and reliable payment processing and subscription lifecycle management.
Negative Consequences / Trade-offs / Risks:
Limited Checkout UI Customization & User Redirect: Accepted for MVP.
Dependency on Stripe: Availability, fees, API changes. (Financial modeling required; regular review of Stripe's status).
Webhook & Reconciliation Complexity: Essential for data integrity, but requires careful implementation and monitoring.
Financial Impact: Transaction fees. Cost modeling is crucial.
International Expansion Nuances: While Stripe is broad, specific local payment methods in some future target regions might require additional integrations beyond Hosted Checkout's default offerings.
7. Validation / Success Metrics
Financial Model (Pre-Implementation): Develop cost model for Stripe fees (transaction, Stripe Tax, etc.) vs. projected revenue at 1k, 5k, 10k MAU, ensuring viability within $75/month project budget post-Cycle 3.
Successful E2E tests for all subscription flows (trial, signup, payment with SCA, cancellation via portal, payment failure, webhook processing, reconciliation job).
No P1/P2 security issues related to payment integration.
Conversion rate through checkout meets defined target (e.g., >X%).
Operational metrics (webhook success rate, reconciliation job effectiveness, support ticket volume for payment issues) meet targets.
Checkout Performance: Page load and interaction times within Stripe Hosted Checkout (measured via synthetic tests or analytics if possible) are acceptable and do not lead to significant user abandonment.
8. Review / Revisit
After first 100-500 paying subscribers: Review conversion rates, actual costs, support load, fraud levels, and user feedback.
If Stripe pricing/terms change significantly or actual costs exceed modeled budget by >20%.
If UI/UX research indicates Hosted Checkout is a major conversion blocker. (Then evaluate Stripe Elements).
When expanding to new major geographic regions with unique payment method preferences.
When planning multiple subscription tiers, advanced discounts, or complex usage-based billing.

