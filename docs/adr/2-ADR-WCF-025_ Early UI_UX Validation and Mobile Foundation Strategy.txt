ADR-WCF-025: Early UI/UX Validation and Mobile Foundation Strategy
Status: VALIDATED (Flutter Foundation)
Date: 2025-06-01 (Final version incorporating comprehensive feedback on AI workflow, NFR implementation, PoC scoping, CI integration, A11y/i18n specifics, performance logging, offline stubs, and timelines for the initial mobile development phase)
Authors: WorldChef Development Team
1. Context and Problem Statement
With the mobile client technology stack (Flutter or React Native) to be determined by comparative PoCs (ADR-WCF-001a), a clear, efficient, and high-fidelity strategy is required for early UI/UX validation and for building the initial mobile application foundation using the eventually chosen stack. This strategy must effectively leverage AI-assisted development, manage resource constraints (20h/week human oversight), and ensure that all initial efforts directly contribute to a production-quality application. This ADR replaces previous validation strategies (superseded ADR-WCF-002, ADR-WCF-024).
2. Decision Drivers
Accurate Mobile UI/UX Validation: Validation within the target mobile environment reflecting native interactions, performance, and platform conventions.
Efficient Resource Utilization & Direct Production Contribution: Maximize value from limited capacity; all code built is foundational.
Rapid Iteration on Core Mobile UI: Quick feedback loops using chosen stack's tooling, augmented by AI.
Solid Mobile Application Foundation: Build reusable core UI components, navigation, theming, and integrate basic NFR considerations (Offline, A11y, i18n, Performance) from the start.
Early Technical & UX Risk Identification & Mitigation: Proactively address challenges.
Effective Stakeholder Feedback: Via demos on actual devices/simulators.
3. Decision: Strategy for Initial Mobile Development Phase (Post Stack Selection)
The project will adopt Direct Mobile Stack Development for Early UI/UX Validation and Foundation Building. This phase commences immediately after the mobile stack is selected (outcome of ADR-WCF-001a PoCs) and has a strict calendar timebox (e.g., 4-5 weeks) for achieving its Minimum Viable Foundation (MVF).
This phase will focus on:
Finalizing UI Specifications & Design Version Lock: High-fidelity Figma designs (version-locked, e.g., "Figma v1.0 - Foundation Phase Freeze") are the primary UI/UX specification. Changes require a formal design change request.
Mobile Application Scaffolding (in chosen stack): Initialize project, implement basic navigation (e.g., go_router for Flutter; React Navigation for RN), set up base theming (e.g., Material 3).
Branching Strategy: All work in a dedicated feature/foundation branch, regularly merged to develop upon completion of stable milestones (e.g., core component set, first PoC).

AI-Assisted Component-Driven Development (CDD) of Core UI Elements:
Identify a strictly-scoped, prioritized set of 3-5 foundational UI components (defined before phase start, e.g., AppButton, basic RecipeCardWidget, ThemedTextField, ScreenScaffoldWidget). Scope includes minimal variants and states for PoC needs.
AI-Human Workflow: AI generates initial component code based on detailed prompts (standardized templates to be used where possible, including requests for basic A11y/i18n stubs). Human oversight refines, ensures adherence to A11y best practices (semantic labels, contrast), i18n-readiness (strings extracted/placeholdered), performance considerations (e.g., const constructors in Flutter), and code quality.
Develop/view in isolation using Widgetbook/storybook_flutter (Flutter) or Storybook for React Native.
CI for Components: Basic CI job (ADR-WCF-011) triggered on commits to feature/foundation runs linting, formatting, and component tests (e.g., snapshot/golden tests for stable states, basic interaction tests).

AI-Assisted Targeted Mobile Proof-of-Concepts (PoCs) for Critical Flows/Screens:
Develop 1-2 specific, critical user flows (defined before phase start, e.g., Onboarding, or Home Screen recipe list) as functional PoCs in the chosen stack, utilizing CDD components and mock data.
Relationship to ADR-WCF-001a PoCs: The chosen stack's PoC from ADR-WCF-001a (e.g., Recipe List/Detail) will directly form the basis for one of these foundational PoCs, requiring refinement and integration of NFR stubs.
PoC Scope to Include NFR Stubs (with defined "stub" quality):
Offline: Cache and display 1 PoC screen's mock data using a simple persistent key-value store (e.g., shared_preferences for Flutter, AsyncStorage/MMKV for RN) when network is "mock-unavailable."
Accessibility (A11y): Ensure PoC screens pass a defined "Basic A11y Check": all interactive elements focusable and clearly labeled for VoiceOver/TalkBack; content read in logical order; color contrast meets WCAG AA for key elements. Use stack-specific linters/tools (e.g., flutter_a11y_linter).
Internationalization (i18n): Implement 1-2 screens with all user-visible strings loaded via a chosen i18n library (e.g., Flutter's intl with ARB files; i18next for RN) using placeholder translations for a second language (e.g., Spanish) to test setup and RTL layout if applicable.
Performance Profiling: Log initial frame rates (target ~60fps), TTI (target <1.5s), and memory usage for PoC screens using stack-specific tools (Flutter DevTools, RN Perf Monitor/Flipper). Capture metrics using simple code snippets (e.g., Stopwatch in Dart, performance.now() in RN) for key operations.


Frequent Stakeholder Demos & Feedback: Regular demos on defined target devices/simulators. Communication plan manages expectations (PoC functionality vs. polish).
Minimum Viable Foundation (MVF) & Contingency:
MVF Definition (to be finalized pre-phase): E.g., Project scaffolded (nav, theme), CDD tool setup, 2 core components built (meeting basic NFR stubs), 1 critical flow PoC functional (meeting basic NFR stubs).
Contingency: If ADR-WCF-001a PoCs stall or yield no clear winner by a specified calendar date (e.g., +1 week from planned PoC end), leadership will select the framework with marginally better PoC results (or make a strategic call) to proceed with an aggressively scoped MVF for this phase to maintain project momentum.
Target Devices/Environments for PoC Validation:
Android: Specified mid-range physical device (e.g., Google Pixel 4a, Android 12).
iOS: Specified mid-range physical device (e.g., iPhone 11, iOS 15).
Network: Test under simulated "Fast 3G" for offline/image loading.
4. Rationale
This strategy ensures highest fidelity validation, direct contribution to production code, early technical and NFR de-risking, creation of reusable assets, and effective stakeholder engagement, all within the chosen mobile stack. It leverages AI for speed while relying on human oversight for quality and complexity. The strict scoping, MVF, and NFR stub integration address resource constraints and aim to build a quality foundation from Day 1.
5. Consequences
Positive Consequences / Benefits:
Accurate UI/UX validation. All development contributes to production codebase.
Early, reusable core component library with basic NFRs considered.
Reduced risk of late-stage rework. Early NFR integration prevents costly retrofitting.
Team gains early, deep experience with chosen stack's UI, performance, A11y, i18n, and offline capabilities.
Negative Consequences / Trade-offs / Risks:
Initial Setup & Learning Curve: Significant focused effort for project setup, CDD tools, CI for components, and NFR stub integration. If chosen stack is new to human overseer(s), ramp-up time impacts capacity.
AI Output Quality & Human Effort for NFRs: Success depends heavily on AI generating good initial code and human oversight being efficient in guiding AI/refining code for NFRs (performance, A11y, i18n, offline) within the 20h/week limit. This is a primary execution risk.
Scope Creep for Components/PoCs: Requires strict discipline. (Mitigation: Pre-defined scope and MVF per component/PoC).
Figma Design Detail Dependency & Version Lock: Relies on detailed, version-locked Figma specs.
6. Key Outputs of This Phase
Scaffolded mobile application (chosen stack) with basic navigation and theming.
Widgetbook/Storybook library of core, themed, reusable UI components (with basic A11y/i18n considerations).
Functional mobile PoCs for critical flows, demonstrating core UI/UX and NFR stubs (offline, A11y, perf logging).
Validated understanding of implementing Figma designs in the chosen stack.
Documented initial performance metrics, A11y/i18n patterns, and offline data handling approach.
Documented learnings on AI-human collaboration workflow for these foundational tasks.
7. Validation / Success Metrics
Successful setup of project, CDD environment, basic component CI.
Delivery of defined core components, meeting design specs and basic A11y/i18n/offline stub requirements.
Functional completion of targeted PoCs, demonstrating core UI/UX and NFR stubs on target devices.
Initial performance metrics logged and reviewed. Basic A11y checks (VoiceOver/TalkBack) pass for PoCs.
Stakeholder feedback on PoCs confirms validation of core mobile experience.
Meeting the defined "Minimum Viable Foundation" (MVF) for this phase within the 4-5 week timebox.
8. Review / Revisit
End of this Initial Foundation Phase: Evaluate if approach provided sufficient UI/UX validation, a solid technical foundation, and if AI-human workflow is sustainable for these tasks. Assess PoC outcomes against goals.
If PoCs reveal critical, unexpected difficulties or performance issues with the  This triggers urgent, focused investigation into specific patterns or libraries within the chosen stack. This phase is about how to build with the chosen stack, not re-choosing the stack unless an absolute showstopper specific to design implementation or NFR integration emerges.

Update Notice 2025-06-13: Flutter chosen per ADR-WCF-001a validation. All references to "chosen stack TBD" updated to Flutter specifics (Widgetbook, Material3).

