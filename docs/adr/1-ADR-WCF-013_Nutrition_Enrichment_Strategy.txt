# 1-ADR-WCF-013 – Nutrition Enrichment Strategy

*Status:* **APPROVED**  
*Date:* 2025-06-13  
*Cycle:* 4  
*Decision Makers:* Core Platform Team

---

## Context
WorldChef recipes currently lack structured nutrition data (calories, macros, micronutrients). User testing and roadmap items (meal-planner, dietary filters) require reliable nutrition values. A third-party proposal suggests enriching recipes via a nutrition API with AI fallback when look-ups fail.

## Decision
We will adopt a **hybrid enrichment pipeline**:
1. **Authoritative API First** – Every new/updated recipe is sent to USDA FoodData Central (free tier) or, if commercial terms require, Edamam Basic ( \$49 / mo cap).
2. **AI Fallback** – When no close match (<90 % cosine on ingredient list) is found, GPT-4 o model estimates nutrition. Response is stored with `confidence = 'ai'`.
3. **Edge Function Implementation** – Supabase Edge Function `nutrition_enrichment` performs lookup, AI fallback, and writes `nutrition_data` + `confidence`.
4. **Batch Mode** – Enrichment runs on `recipes.published_at IS NOT NULL AND nutrition_data IS NULL` nightly (Render cron) to avoid impacting request latency and cost.
5. **Caching** – Hash of normalized ingredient list used as key in `nutrition_cache` table; cache hits bypass external calls.
6. **Legal / UX** – UI shows "Estimated" badge and disclaimer when `confidence != 'api'`.
7. **Cost Guardrail** – Budget alert at \$50 / month on API + OpenAI spend.

## Consequences
+ Enables calorie & macro filters and future premium features.  
+ Minimal runtime latency (<1 ms for cache hit, batch otherwise).  
− Adds nightly job and external API dependency.  
− AI estimates carry ±20 % error; mitigated by badge & disclaimer.

## Alternatives Considered
* Manual entry by creators – high friction.  
* Pure AI estimation – costlier & lower accuracy.  
* Defer feature – blocks roadmap items.

## Implementation Plan
1. Evaluate USDA vs Edamam licensing (task `stg_t009_c001`).  
2. Finalize JSON contract (task `stg_t009_c002`).  
3. Code edge function & cache (tasks `stg_t009_c003`-`c004`).  
4. Unit tests & deploy (task `stg_t009_c005`).  
5. Smoke-test 10 recipes (task `stg_t009_c006`).

---
*Generated by Hybrid_AI_OS | g109* 