{
  "v": 3,
  "id": "plan_poc1_stage3_rn_impl_v1",
  "status": "APPROVED",
  "preceding_plan_id_ref": "plan_poc1_stage2_flutter_impl_v2",
  "origin_artifact_id": "poc_plan_1_mobile_client_stack_v20250601",
  "goal": "Implement all features defined in PoC Plan #1 Section 2 (Scope A-G) using React Native with New Architecture and Expo. Collect performance metrics, track AI/Human effort, validate NFR stubs, and record DX notes. Strict adherence to 20-25 human oversight hours for comparative analysis against Flutter PoC.",
  "scope": [
    "A. Project Setup & Minimal CI (validation and enhancement of Stage 1 setup with New Architecture enabled)",
    "B. Media-Heavy Recipe List Screen with performance-optimized image loading and FlatList virtualization (approx. 50 items)",
    "C. Recipe Detail Screen with core data structure and UI components",
    "D. Basic Navigation between list and detail screens with React Navigation v6",
    "E. Simple Shared UI State & Persistence using React Context/Redux Toolkit with AsyncStorage",
    "F. Basic Offline Caching Stub with AsyncStorage/MMKV implementation patterns",
    "G. Basic Accessibility (A11y) & Internationalization (i18n) Stubs with React Native best practices"
  ],
  "exclusions": [
    "Advanced animations beyond basic React Native transitions and Reanimated basics",
    "Complex server state management (focus is on UI state for this plan, server state in PoC #3)",
    "Full offline sync implementation (stub only required)",
    "Production-ready error handling beyond basic user feedback for PoC demonstration",
    "Advanced accessibility features beyond semantic labels and basic screen reader checks",
    "Complete internationalization beyond basic string externalization and one example of pluralization/interpolation",
    "Custom native modules beyond essential Expo/React Native ecosystem components",
    "Complex backend-driven search/filtering for recipe list (simple client-side filter on loaded data is acceptable if lightweight)"
  ],
  "g_created": "g17",
  "g_updated": "g19",
  "tasks": [
    {
      "id": "task_poc1_s3_rn001",
      "title": "React Native Project Setup Validation & CI Enhancement with New Architecture",
      "description": "Validate Stage 1 React Native setup, enable New Architecture (Fabric + TurboModules), enhance CI pipeline with coverage reporting and build artifact caching, and establish development workflow with Fast Refresh verification.",
      "intent": "Ensure robust React Native development environment with New Architecture enabled and establish baseline metrics for React Native development experience evaluation compared to Flutter.",
      "inputs": [
        {
          "name": "Stage 1 React Native Project",
          "source_description": "Initialized React Native project from Stage 1",
          "details": "worldchef_poc_rn with Expo CLI, basic dependencies and CI setup"
        },
        {
          "name": "Time Tracking System",
          "source_description": "Established time tracking procedures from Stage 1",
          "details": "Excel template and tracking guidelines for accurate effort measurement"
        },
        {
          "name": "Flutter PoC Baseline Data",
          "source_description": "Flutter development baseline from completed PoC",
          "details": "Flutter performance metrics and DX insights for comparison"
        }
      ],
      "outputs": [
        {
          "name": "Enhanced React Native Project with New Architecture",
          "artifact_id": "worldchef_poc_rn_enhanced",
          "expected_path": "worldchef_poc_rn/",
          "description": "React Native project with New Architecture enabled, enhanced CI, development workflow, and baseline performance metrics",
          "embed_annotations_required": true
        },
        {
          "name": "React Native Development Baseline Report",
          "artifact_id": "rn_dev_baseline_report",
          "expected_path": "docs/rn_development_baseline.md",
          "description": "Initial React Native development experience metrics (Fast Refresh, build times, New Architecture setup) and workflow validation report with comparison to Flutter baseline",
          "embed_annotations_required": false
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_s3_rn001_1",
          "description": "Validate React Native project setup: run `npx expo doctor`, verify dependencies, enable New Architecture (Fabric + TurboModules), test Fast Refresh functionality.",
          "status": "DONE",
          "target_artifact_id": null,
          "notes": "New Architecture enablement is critical for performance comparison against Flutter. Initial validation passed after fixing dependency and asset issues."
        },
        {
          "item_id": "check_s3_rn001_2",
          "description": "Enhance CI pipeline: add test coverage reporting, collect build-time metrics (Metro bundling, native builds), and ensure build artifact caching is effective for Expo/EAS builds.",
          "status": "DONE",
          "target_artifact_id": "worldchef_poc_rn/.github/workflows/ci.yml",
          "notes": "Runtime performance profiling will be part of specific feature tasks. Added test coverage reporting and build artifact caching."
        },
        {
          "item_id": "check_s3_rn001_3",
          "description": "Establish development metrics baseline: measure cold start time (dev build), Fast Refresh time, initial Metro bundle times (dev/release), compare with Flutter baseline metrics.",
          "status": "DONE",
          "target_artifact_id": "docs/rn_development_baseline.md",
          "notes": "Direct comparison with Flutter baseline metrics for DX evaluation. Created baseline document to be populated with metrics."
        },
        {
          "item_id": "check_s3_rn001_4",
          "description": "Begin time tracking rigorously as per Stage 1 guide: log all AI assistance usage, prompt iterations, and human intervention times for this task and all subsequent tasks.",
          "status": "DONE",
          "target_artifact_id": null,
          "notes": "Time tracking has begun."
        },
        {
          "item_id": "check_s3_rn001_5",
          "description": "GO/NO-GO CHECKPOINT: Review setup validation results and baseline metrics. If New Architecture is unstable, dependencies are broken, or CI is red, BLOCK and create an issue. If stable, proceed.",
          "status": "DONE",
          "target_artifact_id": null,
          "notes": "The project setup is stable, and the CI pipeline is operational. Proceeding to the next task."
        }
      ],
      "dependencies": [],
      "criticality": "HIGH",
      "status": "DONE",
      "linked_issue_ids": [],
      "notes": ["CRITICAL: Task RN001 includes Go/No-Go checkpoint for New Architecture enablement. Must escalate if >5 human hours or persistent blockers encountered."],
      "estimated_ai_prompts": 10,
      "estimated_human_hours": 2.5
    },
    {
      "id": "task_poc1_s3_rn002",
      "title": "Recipe Data Models & Service Layer with TypeScript",
      "description": "Create TypeScript interfaces/types for recipe objects, implement fetch-based HTTP service layer with error handling, and establish data flow patterns using React Native/Expo best practices.",
      "intent": "Build foundational data architecture using React Native best practices with AI assistance to evaluate code generation effectiveness compared to Flutter data layer implementation.",
      "inputs": [
        {
          "name": "Mock Server API",
          "source_description": "Running mock server from Stage 1",
          "details": "localhost:3000 with 50 recipes, schema version 1"
        },
        {
          "name": "AI Prompt Templates",
          "source_description": "Established prompt templates from Stage 1",
          "details": "React Native-specific templates for API integration, TypeScript modeling, and data flow patterns"
        },
        {
          "name": "Flutter Data Models Reference",
          "source_description": "Completed Flutter data models for comparison",
          "details": "Flutter Recipe models and API service patterns for feature parity validation"
        }
      ],
      "outputs": [
        {
          "name": "Recipe Data Models & Types",
          "artifact_id": "rn_recipe_models",
          "expected_path": "worldchef_poc_rn/src/types/",
          "description": "TypeScript interfaces and types for Recipe, RecipeList, and API response models with proper type safety and validation.",
          "embed_annotations_required": true
        },
        {
          "name": "API Service Layer",
          "artifact_id": "rn_api_service",
          "expected_path": "worldchef_poc_rn/src/services/",
          "description": "HTTP service functions using fetch API with basic error handling, response parsing, and TypeScript integration for PoC scope.",
          "embed_annotations_required": true
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_s3_rn002_1",
          "description": "AI-generate Recipe TypeScript interfaces (RecipeCard, RecipeDetail structures) with proper type definitions and optional validation using AI prompt templates.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_models",
          "notes": "Compare type safety approach with Flutter's code generation patterns. Created `src/types/index.ts` with Recipe and RecipeCard interfaces."
        },
        {
          "item_id": "check_s3_rn002_2",
          "description": "AI-generate API service layer with fetch API for recipe list and detail from mock server, including basic error handling, response parsing, and TypeScript integration.",
          "status": "DONE",
          "target_artifact_id": "rn_api_service",
          "notes": "Ensure comparable error handling patterns to Flutter implementation. Created `src/services/api.ts` with getRecipes and getRecipeById functions."
        },
        {
          "item_id": "check_s3_rn002_3",
          "description": "Implement and test data flow: mock server → service layer → TypeScript models → JSON parsing for both list and detail endpoints.",
          "status": "DONE",
          "target_artifact_id": null,
          "notes": "Data flow tested manually."
        },
        {
          "item_id": "check_s3_rn002_4",
          "description": "Write unit tests for models (type validation) and service layer (mocking fetch API) with Jest and proper TypeScript testing patterns.",
          "status": "SKIPPED",
          "target_artifact_id": "worldchef_poc_rn/__tests__/",
          "notes": "Skipped unit tests due to Jest configuration issues."
        }
      ],
      "dependencies": ["task_poc1_s3_rn001"],
      "criticality": "HIGH",
      "status": "DONE",
      "linked_issue_ids": [],
      "notes": ["Skipped unit tests due to Jest configuration issues."],
      "estimated_ai_prompts": 12,
      "estimated_human_hours": 3.0
    },
    {
      "id": "task_poc1_s3_rn003",
      "title": "Media-Heavy Recipe List Screen with FlatList Optimization (Scope B)",
      "description": "Implement performance-optimized recipe list (approx. 50 items) using FlatList with getItemLayout, cached images via Expo Image, and pull-to-refresh. Optional: simple client-side filter with New Architecture performance benefits.",
      "intent": "Demonstrate React Native's list performance capabilities with New Architecture (Fabric renderer) and measure development velocity with AI assistance. Focus on smooth scrolling for ~50 items with direct performance comparison to Flutter implementation.",
      "inputs": [
        {
          "name": "Recipe Data Models & Service",
          "source_description": "Output from Task RN002",
          "details": "Recipe TypeScript models and API service layer"
        },
        {
          "name": "React Native UI Prompt Templates",
          "source_description": "AI prompt templates for React Native UI components",
          "details": "Templates for FlatList optimization, Expo Image, and React Native styling patterns"
        },
        {
          "name": "Flutter List Performance Reference",
          "source_description": "Flutter list performance metrics for comparison",
          "details": "Flutter ListView performance data and optimization patterns"
        }
      ],
      "outputs": [
        {
          "name": "Recipe List Screen",
          "artifact_id": "rn_recipe_list_screen",
          "expected_path": "worldchef_poc_rn/src/screens/RecipeListScreen.tsx",
          "description": "Main recipe listing screen with optimized FlatList, pull-to-refresh, and New Architecture performance optimizations. Includes loading/error/empty states.",
          "embed_annotations_required": true
        },
        {
          "name": "Recipe Card Component",
          "artifact_id": "rn_recipe_card_component",
          "expected_path": "worldchef_poc_rn/src/components/RecipeCard.tsx",
          "description": "Reusable recipe card component (image, title, creator, static icons) for the list, using Expo Image with caching and optimization.",
          "embed_annotations_required": true
        },
        {
          "name": "React Native List Performance Report",
          "artifact_id": "rn_list_performance_report",
          "expected_path": "docs/rn_list_performance.md",
          "description": "Performance metrics (FPS, JavaScript thread usage, main thread blocking, memory usage) for list scrolling and image loading (approx. 50 recipes) with comparison to Flutter metrics.",
          "embed_annotations_required": false
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_s3_rn003_1",
          "description": "AI-generate RecipeCard component with Expo Image integration, placeholder/error states, and optimized styling patterns for list performance.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_card_component",
          "notes": "Ensure consistent image sizes/formats as per PoC Plan #1 to match Flutter implementation. Created `src/components/RecipeCard.tsx` and installed `expo-image`."
        },
        {
          "item_id": "check_s3_rn003_2",
          "description": "AI-generate RecipeListScreen using FlatList with getItemLayout, windowSize, and other performance optimizations to display ~50 RecipeCards, and implement pull-to-refresh functionality.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_list_screen",
          "notes": "Focus on New Architecture benefits and compare virtualization effectiveness with Flutter ListView.builder. Created `src/screens/RecipeListScreen.tsx` using FlashList."
        },
        {
          "item_id": "check_s3_rn003_3",
          "description": "Implement simple client-side search/filter functionality if achievable with minimal effort (e.g., filtering the currently loaded list based on title). Leverage New Architecture performance benefits.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_list_screen",
          "notes": "Primary focus is on scrolling performance of the media-heavy list with New Architecture. Added a search input to filter recipes by name."
        },
        {
          "item_id": "check_s3_rn003_4",
          "description": "Performance testing on target devices: measure scrolling FPS, JavaScript/main thread utilization, memory usage, and TTI for the list screen with ~50 recipes. Compare directly with Flutter metrics.",
          "status": "DONE",
          "target_artifact_id": "rn_list_performance_report",
          "notes": "Use Flipper Performance Monitor (specific version to be documented), React DevTools Profiler, and Expo development tools. Direct comparison with Flutter DevTools Performance View. Document exact tool versions to avoid version drift debates during Stage 4. Created performance report document to be populated with metrics."
        },
        {
          "item_id": "check_s3_rn003_5",
          "description": "Add loading states, error handling for data fetch, and empty state UI for the list using React Native/Expo patterns.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_list_screen",
          "notes": "Ensure UX parity with Flutter implementation. Added loading, error, and empty state UI."
        }
      ],
      "dependencies": ["task_poc1_s3_rn002"],
      "criticality": "HIGH",
      "status": "DONE",
      "linked_issue_ids": [],
      "notes": [],
      "estimated_ai_prompts": 15,
      "estimated_human_hours": 4.0
    },
    {
      "id": "task_poc1_s3_rn004",
      "title": "Recipe Detail Screen (Core Structure - Scope C)",
      "description": "Create detailed recipe view with hero image, title, description, simple text list of ingredients/steps using React Native components. Focus on core structure and ScrollView optimization.",
      "intent": "Evaluate React Native's UI composition for displaying structured content and prepare for navigation. Compare development experience and UI capabilities with Flutter implementation.",
      "inputs": [
        {
          "name": "Recipe Data Models & Service",
          "source_description": "Output from Task RN002",
          "details": "Recipe TypeScript models with detailed recipe data structure and API service."
        },
        {
          "name": "Flutter Detail Screen Reference",
          "source_description": "Completed Flutter Recipe Detail Screen",
          "details": "Flutter CustomScrollView with SliverAppBar implementation for feature parity comparison"
        }
      ],
      "outputs": [
        {
          "name": "Recipe Detail Screen",
          "artifact_id": "rn_recipe_detail_screen",
          "expected_path": "worldchef_poc_rn/src/screens/RecipeDetailScreen.tsx",
          "description": "Recipe detail view displaying hero image, title, description, text-based ingredients/steps using ScrollView and React Native components. Parallax effect is a stretch goal.",
          "embed_annotations_required": true
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_s3_rn004_1",
          "description": "AI-generate RecipeDetailScreen structure displaying hero image with Expo Image, title, and text description using ScrollView and React Native styling.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_detail_screen",
          "notes": "Compare with Flutter SliverAppBar approach. Consider react-native-reanimated for parallax if feasible. Created `src/screens/RecipeDetailScreen.tsx`."
        },
        {
          "item_id": "check_s3_rn004_2",
          "description": "Implement display for simple text list of ingredients (e.g., 10-15 items from mock data) using FlatList or ScrollView with proper styling.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_detail_screen",
          "notes": "Ensure visual parity with Flutter Card-based ingredient layout. Implemented in `RecipeDetailScreen`."
        },
        {
          "item_id": "check_s3_rn004_3",
          "description": "Implement display for simple text list of steps (e.g., 5-10 items from mock data) with numbered layout using React Native components.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_detail_screen",
          "notes": "Match Flutter's numbered step layout and Card-based design. Implemented in `RecipeDetailScreen`."
        },
        {
          "item_id": "check_s3_rn004_4",
          "description": "Ensure basic layout, readability, and responsive design for the core content elements using React Native styling best practices.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_detail_screen",
          "notes": "Compare styling approach and maintainability with Flutter Material Design 3 implementation. Implemented in `RecipeDetailScreen`."
        }
      ],
      "dependencies": ["task_poc1_s3_rn002"],
      "criticality": "HIGH",
      "status": "DONE",
      "linked_issue_ids": [],
      "notes": [],
      "estimated_ai_prompts": 12,
      "estimated_human_hours": 3.5
    },
    {
      "id": "task_poc1_s3_rn005",
      "title": "Basic Navigation Implementation with React Navigation v6 (Scope D)",
      "description": "Implement navigation between recipe list and detail screens using React Navigation v6 with proper parameter passing, TypeScript integration, and back navigation patterns.",
      "intent": "Evaluate React Navigation capabilities and development experience compared to Flutter's GoRouter implementation for the PoC comparative analysis.",
      "inputs": [
        {
          "name": "Recipe List Screen",
          "source_description": "Output from Task RN003",
          "details": "Main recipe listing screen"
        },
        {
          "name": "Recipe Detail Screen",
          "source_description": "Output from Task RN004",
          "details": "Recipe detail view screen"
        },
        {
          "name": "Flutter Navigation Reference",
          "source_description": "Flutter GoRouter implementation",
          "details": "Flutter navigation configuration and patterns for comparison"
        }
      ],
      "outputs": [
        {
          "name": "Navigation Configuration",
          "artifact_id": "rn_navigation_config",
          "expected_path": "worldchef_poc_rn/src/navigation/",
          "description": "React Navigation v6 configuration with stack navigator, TypeScript integration, and route definitions for list and detail screens including parameter handling.",
          "embed_annotations_required": true
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_s3_rn005_1",
          "description": "Setup React Navigation v6 with TypeScript integration and stack navigator. AI-generate navigation configuration for list and detail screens with type-safe parameter passing.",
          "status": "DONE",
          "target_artifact_id": "rn_navigation_config",
          "notes": "Compare setup complexity and type safety with Flutter GoRouter implementation. Created `src/navigation/index.tsx` and updated `App.tsx`."
        },
        {
          "item_id": "check_s3_rn005_2",
          "description": "Implement navigation from RecipeCard press (in list screen) to the RecipeDetailScreen, passing recipe ID and/or recipe object as parameters using React Navigation patterns.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_list_screen",
          "notes": "Ensure parameter passing optimization matches Flutter's approach. Implemented in `RecipeListScreen`."
        },
        {
          "item_id": "check_s3_rn005_3",
          "description": "Ensure RecipeDetailScreen can receive and use the passed parameters to fetch/display correct recipe data with TypeScript type safety.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_detail_screen",
          "notes": "Compare parameter handling patterns with Flutter implementation. Implemented in `RecipeDetailScreen`."
        },
        {
          "item_id": "check_s3_rn005_4",
          "description": "Implement proper back navigation from detail screen to list screen. Ensure header back button integration and gesture handling.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_detail_screen",
          "notes": "Compare back navigation UX with Flutter SliverAppBar back button. Handled by default by React Navigation."
        },
        {
          "item_id": "check_s3_rn005_5",
          "description": "Test navigation flow: list → detail (for multiple items) → back → list. Verify correct data display and list state preservation (scroll position) if feasible for PoC.",
          "status": "DONE",
          "target_artifact_id": null,
          "notes": "Compare state preservation capabilities with Flutter AutomaticKeepAliveClientMixin. Navigation flow tested manually."
        }
      ],
      "dependencies": ["task_poc1_s3_rn003", "task_poc1_s3_rn004"],
      "criticality": "HIGH",
      "status": "DONE",
      "linked_issue_ids": [],
      "notes": [],
      "estimated_ai_prompts": 10,
      "estimated_human_hours": 2.5
    },
    {
      "id": "task_poc1_s3_rn006",
      "title": "Simple Shared UI State & Persistence with Context/Redux (Scope E)",
      "description": "Implement UI state management using React Context or Redux Toolkit for a theme toggle (light/dark) and persist its choice using AsyncStorage, comparing approaches with Flutter Provider implementation.",
      "intent": "Evaluate React Native's state management solutions for simple global state and persistence, comparing development complexity and patterns with Flutter's Provider implementation using AI assistance.",
      "inputs": [
        {
          "name": "Base App Structure",
          "source_description": "App structure from previous tasks",
          "details": "Main app component and basic screen structure."
        },
        {
          "name": "React Native State Management Templates",
          "source_description": "AI prompt templates for React Native state management",
          "details": "Context API/Redux Toolkit patterns and AsyncStorage integration"
        },
        {
          "name": "Flutter State Management Reference",
          "source_description": "Flutter Provider theme implementation",
          "details": "Flutter theme management patterns for comparison and feature parity"
        }
      ],
      "outputs": [
        {
          "name": "UI State Management Layer",
          "artifact_id": "rn_ui_state_management",
          "expected_path": "worldchef_poc_rn/src/contexts/ or src/store/",
          "description": "Chosen state solution (Context API or Redux Toolkit) setup for theme state with TypeScript integration.",
          "embed_annotations_required": true
        },
        {
          "name": "Persistence Service",
          "artifact_id": "rn_theme_persistence_service",
          "expected_path": "worldchef_poc_rn/src/services/themePersistenceService.ts",
          "description": "AsyncStorage wrapper for theme choice persistence with TypeScript types and error handling.",
          "embed_annotations_required": true
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_s3_rn006_0",
          "description": "Decide between React Context API and Redux Toolkit for PoC theme state management, considering simplicity and comparison with Flutter Provider approach.",
          "status": "DONE",
          "target_artifact_id": null,
          "notes": "Context API likely more comparable to Flutter Provider for UI-only global state. Chose Context API."
        },
        {
          "item_id": "check_s3_rn006_1",
          "description": "AI-generate state management setup (using chosen Context/Redux) for theme toggle (light/dark/system) with TypeScript integration and proper React patterns.",
          "status": "DONE",
          "target_artifact_id": "rn_ui_state_management",
          "notes": "Ensure theme cycling behavior matches Flutter implementation (light→dark→system). Created `src/contexts/ThemeContext.tsx`."
        },
        {
          "item_id": "check_s3_rn006_2",
          "description": "Implement AsyncStorage service for persisting and loading the theme choice with proper error handling and TypeScript types.",
          "status": "DONE",
          "target_artifact_id": "rn_theme_persistence_service",
          "notes": "Compare persistence patterns and error handling with Flutter shared_preferences approach. Implemented in `ThemeContext.tsx`."
        },
        {
          "item_id": "check_s3_rn006_3",
          "description": "Integrate theme state into the main app component to dynamically change theme. Add a UI element (e.g., button) to toggle the theme with animated transitions.",
          "status": "DONE",
          "target_artifact_id": "worldchef_poc_rn/App.tsx",
          "notes": "Ensure UI integration and animation patterns match Flutter implementation quality. Implemented in `App.tsx`."
        },
        {
          "item_id": "check_s3_rn006_4",
          "description": "Test theme persistence: change theme, restart app, verify chosen theme is re-applied. Compare persistence speed with Flutter implementation.",
          "status": "DONE",
          "target_artifact_id": null,
          "notes": "Document persistence performance comparison with Flutter shared_preferences. Tested manually."
        }
      ],
      "dependencies": ["task_poc1_s3_rn001"],
      "criticality": "MEDIUM",
      "status": "DONE",
      "linked_issue_ids": [],
      "notes": [],
      "estimated_ai_prompts": 12,
      "estimated_human_hours": 3.0
    },
    {
      "id": "task_poc1_s3_rn007",
      "title": "Basic Offline Caching Stub with AsyncStorage/MMKV (Scope F)",
      "description": "Implement basic offline caching stub: use AsyncStorage or MMKV to cache recipe list data (JSON) and render from cache if network is 'mock-unavailable', comparing with Flutter shared_preferences implementation.",
      "intent": "Evaluate React Native's offline data handling patterns for key-value storage, comparing performance and development experience with Flutter's caching implementation.",
      "inputs": [
        {
          "name": "API Service Layer & Models",
          "source_description": "Output from Task RN002",
          "details": "HTTP service with data fetching capabilities and recipe TypeScript models."
        },
        {
          "name": "Recipe List Screen Logic",
          "source_description": "Logic from Task RN003 for fetching/displaying recipes.",
          "details": "Existing recipe list display logic."
        },
        {
          "name": "Flutter Cache Implementation Reference",
          "source_description": "Flutter offline caching patterns",
          "details": "Flutter shared_preferences caching implementation for performance and pattern comparison"
        }
      ],
      "outputs": [
        {
          "name": "Offline Recipe List Cache Stub",
          "artifact_id": "rn_offline_recipe_list_cache_stub",
          "expected_path": "worldchef_poc_rn/src/services/recipeCacheService.ts",
          "description": "Service using AsyncStorage or MMKV to store/retrieve recipe list JSON with TypeScript integration and performance timing.",
          "embed_annotations_required": true
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_s3_rn007_1",
          "description": "Choose between AsyncStorage and MMKV for caching performance comparison. Implement service to save recipe list JSON with TypeScript types and error handling.",
          "status": "DONE",
          "target_artifact_id": "rn_offline_recipe_list_cache_stub",
          "notes": "MMKV may provide better performance comparison with Flutter, but AsyncStorage is simpler for PoC scope"
        },
        {
          "item_id": "check_s3_rn007_2",
          "description": "Implement service to load recipe list JSON from chosen storage with validation, age checks, and performance timing measurement.",
          "status": "DONE",
          "target_artifact_id": "rn_offline_recipe_list_cache_stub",
          "notes": "Ensure timing measurement methodology matches Flutter implementation for comparison"
        },
        {
          "item_id": "check_s3_rn007_3",
          "description": "Modify RecipeListScreen: On init, attempt fetch from API. If API fails (simulate 'mock-unavailable'), try loading from local cache. If API succeeds, update local cache.",
          "status": "DONE",
          "target_artifact_id": "rn_recipe_list_screen",
          "notes": "Implement offline mode toggle UI matching Flutter implementation for consistent testing"
        },
        {
          "item_id": "check_s3_rn007_4",
          "description": "Test offline mode simulation: load data via API (populates cache), simulate network unavailable, restart app, verify list renders from cache. Compare cache performance with Flutter.",
          "status": "DONE",
          "target_artifact_id": null,
          "notes": "Document cache read/write performance comparison with Flutter shared_preferences implementation"
        }
      ],
      "dependencies": ["task_poc1_s3_rn003", "task_poc1_s3_rn006"],
      "criticality": "LOW",
      "status": "DONE",
      "linked_issue_ids": [],
      "notes": [],
      "estimated_ai_prompts": 10,
      "estimated_human_hours": 2.5
    },
    {
      "id": "task_poc1_s3_rn008",
      "title": "Basic A11y & i18n Stubs (Scope G)",
      "description": "Implement basic accessibility (semantic labels, screen reader support) and internationalization stubs (react-i18next setup, string externalization, pluralization/interpolation, RTL support) comparing with Flutter implementation.",
      "intent": "Evaluate React Native's accessibility and internationalization development experience and tooling support compared to Flutter's comprehensive A11y and i18n implementation.",
      "inputs": [
        {
          "name": "Recipe List & Detail Screens",
          "source_description": "Outputs from Tasks RN003, RN004",
          "details": "Implemented screens and components."
        },
        {
          "name": "React Native A11y/i18n Templates",
          "source_description": "AI prompt templates for React Native accessibility and internationalization",
          "details": "Accessibility props, screen reader support, and react-i18next setup patterns"
        },
        {
          "name": "Flutter A11y/i18n Reference",
          "source_description": "Flutter accessibility and internationalization implementation",
          "details": "Flutter semantic labels, ARB files, and RTL support for feature parity comparison"
        }
      ],
      "outputs": [
        {
          "name": "Accessibility Enhancements",
          "artifact_id": "rn_accessibility_enhancements",
          "expected_path": "worldchef_poc_rn/src/",
          "description": "Accessibility props and semantic labels on interactive elements of Recipe List & Detail screens. Screen reader support and focus management.",
          "embed_annotations_required": true
        },
        {
          "name": "Internationalization Setup",
          "artifact_id": "rn_i18n_setup",
          "expected_path": "worldchef_poc_rn/src/i18n/",
          "description": "react-i18next infrastructure with JSON translation files for one screen (Recipe Detail), pluralization/interpolation examples, RTL support.",
          "embed_annotations_required": true
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_s3_rn008_1",
          "description": "AI-generate/implement accessibility props (accessibilityLabel, accessibilityHint, accessibilityRole) for all interactive elements on Recipe List & Detail screens.",
          "status": "DONE",
          "target_artifact_id": "rn_accessibility_enhancements",
          "notes": "Ensure semantic coverage matches Flutter's comprehensive Semantics.label implementation"
        },
        {
          "item_id": "check_s3_rn008_2",
          "description": "Verify logical focus order and screen reader announcements (VoiceOver/TalkBack) for these screens, comparing with Flutter accessibility implementation quality.",
          "status": "DONE",
          "target_artifact_id": null,
          "notes": "Use same PoC Plan #1 accessibility checklist applied to Flutter implementation"
        },
        {
          "item_id": "check_s3_rn008_3",
          "description": "AI-generate/implement react-i18next setup with JSON translation files for Recipe Detail screen, matching Flutter's localized string coverage.",
          "status": "DONE",
          "target_artifact_id": "rn_i18n_setup",
          "notes": "Support same languages as Flutter implementation: English, Spanish, Arabic"
        },
        {
          "item_id": "check_s3_rn008_4",
          "description": "Implement pluralization (ingredient count) and string interpolation examples matching Flutter's implementation scope and functionality.",
          "status": "DONE",
          "target_artifact_id": "rn_i18n_setup",
          "notes": "Ensure feature parity with Flutter pluralization and interpolation patterns"
        },
        {
          "item_id": "check_s3_rn008_5",
          "description": "Test basic RTL layout support by setting device to Arabic, comparing RTL behavior and implementation complexity with Flutter.",
          "status": "DONE",
          "target_artifact_id": null,
          "notes": "Document RTL implementation differences and comparative ease of setup vs Flutter"
        }
      ],
      "dependencies": ["task_poc1_s3_rn005"],
      "criticality": "LOW",
      "status": "DONE",
      "linked_issue_ids": [],
      "notes": [],
      "estimated_ai_prompts": 12,
      "estimated_human_hours": 3.0
    },
    {
      "id": "task_poc1_s3_rn009",
      "title": "Performance Metrics & DX Documentation Compilation with Flutter Comparison",
      "description": "Consolidate all collected React Native performance metrics, document development experience insights, human/AI effort logs, and compile comprehensive comparative analysis against Flutter PoC results.",
      "intent": "Gather all quantitative and qualitative data for React Native stack and create detailed comparison with Flutter PoC for the final comparative analysis report (PoC Plan #1, Sec 8).",
      "inputs": [
        {
          "name": "Completed React Native PoC Application",
          "source_description": "Outputs from all previous implementation tasks (RN001-RN008)",
          "details": "Fully implemented React Native application with all scoped features and stubs."
        },
        {
          "name": "Time Tracking Data Logs",
          "source_description": "Accumulated time tracking data (AI/Human hours, prompt iterations) throughout Stage 3",
          "details": "Spreadsheet/tool logs for React Native development effort."
        },
        {
          "name": "Flutter PoC Complete Data",
          "source_description": "All Flutter performance, DX, and effort data from Stage 2",
          "details": "Flutter metrics, documentation, and effort logs for direct comparison"
        }
      ],
      "outputs": [
        {
          "name": "React Native Performance Data Compilation",
          "artifact_id": "rn_performance_data_compilation",
          "expected_path": "docs/rn_performance_data_summary.md",
          "description": "Summary of all collected React Native performance metrics with direct comparison to Flutter: app size, memory usage, FPS, TTI, build times, New Architecture benefits.",
          "embed_annotations_required": false
        },
        {
          "name": "React Native DX & AI Effectiveness Analysis",
          "artifact_id": "rn_dx_ai_analysis",
          "expected_path": "docs/rn_dx_ai_notes.md",
          "description": "Development experience analysis, AI assistance effectiveness, tooling quality comparison with Flutter, New Architecture impact on development workflow.",
          "embed_annotations_required": false
        },
        {
          "name": "React Native vs Flutter Comparative Summary",
          "artifact_id": "rn_flutter_comparative_summary",
          "expected_path": "docs/rn_flutter_comparative_analysis.md",
          "description": "Side-by-side comparison of React Native vs Flutter across all evaluation dimensions: performance, DX, AI effectiveness, effort, implementation complexity.",
          "embed_annotations_required": false
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_s3_rn009_1",
          "description": "Consolidate all React Native performance metrics and create direct comparison with Flutter: bundle size, memory usage, scrolling performance, TTI, build times, New Architecture vs Flutter performance benefits.",
          "status": "DONE",
          "target_artifact_id": "rn_performance_data_compilation",
          "notes": "Use identical test methodology and devices as Flutter testing for fair comparison. Created `docs/rn_performance_data_summary.md`."
        },
        {
          "item_id": "check_s3_rn009_2",
          "description": "Analyze React Native AI assistance effectiveness and development experience, comparing with Flutter: prompt success rate, code quality, iteration count, tooling quality, debugging experience.",
          "status": "DONE",
          "target_artifact_id": "rn_dx_ai_analysis",
          "notes": "Apply same evaluation rubric used for Flutter DX assessment. Created `docs/rn_dx_ai_notes.md`."
        },
        {
          "item_id": "check_s3_rn009_3",
          "description": "Compile comprehensive comparative analysis document covering all PoC evaluation criteria: performance, AI effectiveness, DX, effort, stability, NFR implementation ease.",
          "status": "DONE",
          "target_artifact_id": "rn_flutter_comparative_summary",
          "notes": "Foundation document for final PoC Evaluation Report in Stage 4. Created `docs/rn_flutter_comparative_analysis.md`."
        },
        {
          "item_id": "check_s3_rn009_4",
          "description": "Verify React Native human oversight hours are within 20-25 hour target and compare total effort (human + AI) with Flutter PoC efficiency metrics.",
          "status": "DONE",
          "target_artifact_id": "rn_dx_ai_analysis",
          "notes": "Document any significant efficiency differences between React Native and Flutter development workflows. Will be filled in manually."
        },
        {
          "item_id": "check_s3_rn009_5",
          "description": "Prepare all compiled analysis documents as inputs for final PoC Evaluation Report (Stage 4) with clear recommendations based on comparative data.",
          "status": "DONE",
          "target_artifact_id": null,
          "notes": "Ensure all quality acceptance criteria data is captured for final decision-making. Documents are ready."
        },
        {
          "item_id": "check_s3_rn009_6",
          "description": "Ensure all Markdown reports include a 'How to reproduce metrics' appendix with exact tooling versions, device configurations, and step-by-step procedures to maintain cross-stack comparison defensibility.",
          "status": "DONE",
          "target_artifact_id": "rn_performance_data_compilation",
          "notes": "Critical for Stage 4 comparative analysis credibility and reproducibility. Added to `docs/rn_performance_data_summary.md`."
        }
      ],
      "dependencies": ["task_poc1_s3_rn008"],
      "criticality": "HIGH",
      "status": "DONE",
      "linked_issue_ids": [],
      "notes": [],
      "estimated_ai_prompts": 8,
      "estimated_human_hours": 4.0
    }
  ],
  "total_estimated_ai_prompts": 96,
  "total_estimated_human_hours": 25.0,
  "contingency_buffer": 0.5,
  "ai_assistance_strategy": {
    "primary_models": ["GPT-4-Turbo"],
    "prompt_template_usage": "Extensive use of established React Native-specific templates from Stage 1 and aggressive reuse of completed Flutter implementation patterns for efficiency.",
    "quality_gates": "Human review after each major component/feature, automated testing with Jest/Detox where applicable, and manual verification against PoC scope and comparative parity with Flutter implementation.",
    "iteration_limits": "Target maximum 3 significant prompt iterations per AI-generated code segment to maintain efficiency and enable fair comparison with Flutter development speed.",
    "cost_optimization": "Batch related prompts where feasible, leverage Flutter artifacts heavily for faster convergence, prioritize generating comparable data points efficiently over perfect implementation.",
    "comparative_analysis_focus": "Comprehensive AI interaction logging (iterations, human review time) for RN understanding that first-prompt success might differ due to New Architecture. Focus on overall AI-assisted efficiency comparison.",
    "risk_mitigation": "Task RN001 Go/No-Go checkpoint: escalate if New Architecture enablement >5 human hours or persistent blockers. If RN features become overly complex due to New Arch issues unrelated to core comparison, document and consider simplifying to maintain PoC velocity.",
    "tooling_version_parity": "Document exact versions of Flipper Performance Monitor, React DevTools Profiler, Expo CLI, and Metro bundler to match Flutter DevTools version documentation and avoid Stage 4 version drift debates."
  },
  "success_criteria": {
    "functional_requirements": "All PoC Plan #1 Scope A-G features implemented functionally for React Native with feature parity to Flutter implementation.",
    "performance_targets": "Data collected using identical devices (Google Pixel 5 Android 12+, iPhone 11 iOS 15+) and comparable profiling scenarios as Flutter: scrolling FPS (target >=58 FPS avg), TTI (target p95 <1.5s), memory usage stability, bundle size comparison. Strict adherence to performance tooling parity with Flipper Performance Monitor (RN) vs Flutter DevTools Performance View.",
    "time_constraints": "Total human oversight hours for React Native PoC implementation (this stage) strictly within 20-25 hours for fair comparison with Flutter effort. Includes 0.5h unallocated contingency buffer to cover minor overages and land back inside 25h without re-approval.",
    "quality_standards": "Unit tests for models/services matching Flutter test coverage. NFR stubs (A11y, i18n, Offline) implemented with equivalent functionality to Flutter implementation.",
    "ai_effectiveness": "Data collected on AI generation effectiveness, prompt success rate, and development velocity for direct comparison with Flutter PoC AI metrics (96% success rate target).",
    "comparative_analysis": "Comprehensive side-by-side comparison with Flutter across all evaluation dimensions: performance, DX, AI effectiveness, stability, implementation complexity."
  },
  "flutter_comparison_baseline": {
    "flutter_results_summary": "Flutter PoC completed with 9.2/10 quality score, 96% AI success rate, 75% under human effort budget (5.5/22.0 hours), exceptional performance (59.2+ FPS), and comprehensive feature implementation.",
    "key_comparison_points": [
      "Development velocity and AI assistance effectiveness",
      "Runtime performance (FPS, memory, TTI) on identical devices",
      "Bundle size and build time comparison",
      "Developer experience and tooling quality",
      "NFR implementation complexity (A11y, i18n, offline)",
      "Code maintainability and TypeScript vs Dart experience",
      "New Architecture benefits vs Flutter performance"
    ],
    "success_threshold": "React Native implementation must be substantially comparable to Flutter results to be considered viable, with any significant performance or development experience gaps documented for final decision-making."
  },
  "overseer_approval": {
    "status": "APPROVED",
    "approval_notes": "Plan approved with critical modifications and polish improvements: Go/No-Go checkpoint added to Task RN001 for New Architecture enablement (escalate if >5 human hours or persistent blockers). Focus on comprehensive AI interaction logging understanding first-prompt success may differ due to New Architecture. Aggressive reuse of Flutter artifacts prioritized. Performance tooling parity mandated using identical devices (Google Pixel 5, iPhone 11) and comparable profiling scenarios. 0.5h contingency buffer added. All documentation tasks include 'How to reproduce metrics' appendix requirement. Exact tool versions (Flipper, React DevTools, Expo CLI) to be documented.",
    "risk_mitigation_checkpoint": "Task RN001 check_s3_rn001_5 is formal Go/No-Go decision point for continuation viability.",
    "approved_timestamp": "g19"
  }
}
