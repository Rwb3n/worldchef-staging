{
  "v": 1,
  "id": "plan_poc1_stage1_setup_v2", // Added v2 to indicate revision
  "status": "APPROVED",
  "preceding_plan_id_ref": "initiative_plan_poc1_mobile_stack_selection",
  "origin_artifact_id": "poc_plan_1_mobile_client_stack_v20250601", // More specific artifact ID
  "goal": "Set up complete, version-controlled development environments and consistent tooling for both Flutter and React Native PoCs, ensuring all prerequisites are met for fair comparison, including functional mock data access.",
  "scope": [
    "Initialize version-controlled Flutter project with standard tooling and CI",
    "Initialize version-controlled React Native project (Expo CLI, New Arch) with standard tooling and CI",
    "Set up version-controlled mock data server with identical JSON data, clear endpoint/port documentation, and basic CORS handling",
    "Configure test devices (physical & emulators/simulators) with detailed setup verification and network simulation",
    "Prepare AI tooling and prompting strategy with secure secret management",
    "Establish time/effort tracking mechanism with defined data fields and ownership",
    "Create a central Stage 1 onboarding document",
    "Perform an integration smoke test to ensure both PoCs can consume mock data"
  ],
  "exclusions": [
    "Actual PoC feature implementation (media lists, detail screens, NFR stubs, etc.)",
    "Detailed performance benchmarking beyond basic response time checks for mock server",
    "Advanced UI/UX implementation beyond basic project scaffolds",
    "Complex state management implementation beyond initial setup if any",
    "In-depth Offline/A11y/i18n implementation beyond basic project configuration for these"
  ],
  "g_created": 3, // Will be updated
  "g_updated": 3, // Will be updated
  "tasks": [
    {
      "id": "task_poc1_s1_001",
      "title": "Flutter Project Initialization & Version Control Setup",
      "description": "Create, version-control, and configure Flutter project with standard tooling, CI, development environment setup, and baseline package management.",
      "intent": "Establish a robust and consistent Flutter development environment, version-controlled and integrated with CI, suitable for the PoC's comparative analysis.",
      "inputs": [
        {
          "name": "Flutter SDK",
          "source_description": "Official Flutter SDK installation",
          "details": "Latest stable version of Flutter SDK"
        },
        {
          "name": "Android Studio / VS Code",
          "source_description": "IDE installation",
          "details": "Latest stable version with Flutter plugins"
        },
        {
          "name": "Git Client",
          "source_description": "Version control system",
          "details": "Latest stable version"
        },
        {
          "name": "CI Template/Checklist",
          "source_description": "Shared CI configuration guidelines (see Task 007)",
          "details": "Defines required CI steps (lint, test, build)"
        }
      ],
      "outputs": [
        {
          "name": "Flutter Project Repository",
          "artifact_id": "worldchef_poc_flutter",
          "expected_path": "git_remote_url/worldchef_poc_flutter", // Updated to reflect remote repo
          "description": "Initialized, version-controlled Flutter project with standard tooling, CI configuration, and baseline pubspec.yaml",
          "embed_annotations_required": true
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_poc1_s1_001_0",
          "description": "Initialize Git repository locally for 'worldchef_poc_flutter'.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": "Includes .gitignore for Flutter."
        },
        {
          "item_id": "check_poc1_s1_001_1",
          "description": "Install Flutter SDK and verify installation (`flutter doctor`).",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_001_2",
          "description": "Create new Flutter project (`flutter create worldchef_poc_flutter`) with standard structure.",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_flutter",
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_001_3",
          "description": "Configure CI pipeline (GitHub Actions) based on shared CI template (Task 007), ensuring lint, basic tests, and build steps.",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_flutter/.github/workflows/ci.yml",
          "notes": "Verify CI runs `flutter analyze`, `flutter test`, and `flutter build apk/ipa --debug` (or equivalent)."
        },
        {
          "item_id": "check_poc1_s1_001_4",
          "description": "Set up linting and formatting rules (`analysis_options.yaml`).",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_flutter/analysis_options.yaml",
          "notes": "Consider company-wide lint rules if applicable."
        },
        {
          "item_id": "check_poc1_s1_001_5",
          "description": "Configure development environment (IDE, plugins).",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_001_6",
          "description": "Establish baseline `pubspec.yaml` with any core PoC packages (e.g., http, shared_preferences, cached_network_image placeholders).",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_flutter/pubspec.yaml",
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_001_7",
          "description": "Set up remote Git repository and push initial commit.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_001_8",
          "description": "Configure any required secrets (e.g., for private packages) in GitHub Actions, referencing .env.example if used.",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_flutter/.env.example",
          "notes": "Ensure actual secrets are not committed."
        }
      ],
      "dependencies": [], // Can start in parallel with RN setup
      "criticality": "HIGH",
      "status": "PENDING",
      "linked_issue_ids": [],
      "notes": []
    },
    {
      "id": "task_poc1_s1_002",
      "title": "React Native Project Initialization & Version Control Setup",
      "description": "Create, version-control, and configure React Native project with Expo CLI, New Architecture enabled, standard tooling, and baseline package management.",
      "intent": "Establish a robust and consistent React Native development environment, version-controlled and integrated with CI, suitable for the PoC's comparative analysis.",
      "inputs": [
        {
          "name": "Node.js",
          "source_description": "Official Node.js installation",
          "details": "Latest LTS version of Node.js"
        },
        {
          "name": "Expo CLI",
          "source_description": "Expo CLI installation",
          "details": "Latest stable version of Expo CLI"
        },
        {
          "name": "Git Client",
          "source_description": "Version control system",
          "details": "Latest stable version"
        },
        {
          "name": "CI Template/Checklist",
          "source_description": "Shared CI configuration guidelines (see Task 007)",
          "details": "Defines required CI steps (lint, test, build)"
        }
      ],
      "outputs": [
        {
          "name": "React Native Project Repository",
          "artifact_id": "worldchef_poc_rn",
          "expected_path": "git_remote_url/worldchef_poc_rn", // Updated
          "description": "Initialized, version-controlled React Native project with Expo CLI, New Architecture, standard tooling, and baseline package.json",
          "embed_annotations_required": true
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_poc1_s1_002_0",
          "description": "Initialize Git repository locally for 'worldchef_poc_rn'.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": "Includes .gitignore for Node/RN/Expo."
        },
        {
          "item_id": "check_poc1_s1_002_1",
          "description": "Install Node.js and verify installation.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_002_2",
          "description": "Install Expo CLI and verify installation.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_002_3",
          "description": "Create new React Native project with Expo CLI (`expo init worldchef_poc_rn`).",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_rn",
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_002_4",
          "description": "Enable New Architecture as per Expo documentation (e.g., in `app.json` or by prebuilding if necessary). Verify native scaffolding updates for both iOS and Android.",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_rn/app.json", // Primary config point
          "notes": "If Expo Managed Workflow doesn't fully support specific New Arch details for PoC, document decision on handling (e.g., prebuild, or note limitation)."
        },
        {
          "item_id": "check_poc1_s1_002_5",
          "description": "Configure CI pipeline (GitHub Actions) based on shared CI template (Task 007), ensuring lint, basic tests, and build steps.",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_rn/.github/workflows/ci.yml",
          "notes": "Verify CI runs ESLint, Prettier, `jest` (if applicable for PoC setup), and `expo export` or `eas build --platform android/ios --profile development` (or equivalent)."
        },
        {
          "item_id": "check_poc1_s1_002_6",
          "description": "Set up ESLint and Prettier.",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_rn/.eslintrc.js", // and .prettierrc.js
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_002_7",
          "description": "Establish baseline `package.json` with any core PoC packages (e.g., react-navigation, zustand, axios, @shopify/flash-list placeholders).",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_rn/package.json",
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_002_8",
          "description": "Set up remote Git repository and push initial commit.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_002_9",
          "description": "Configure any required secrets in GitHub Actions, referencing .env.example if used.",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_rn/.env.example",
          "notes": "Ensure actual secrets are not committed."
        }
      ],
      "dependencies": [], // Can start in parallel with Flutter setup
      "criticality": "HIGH",
      "status": "PENDING",
      "linked_issue_ids": [],
      "notes": []
    },
    {
      "id": "task_poc1_s1_003",
      "title": "Mock Data Server Setup & Version Control",
      "description": "Set up, version-control, and document local mock data server with identical JSON data for both PoCs, including schema note, CORS, and port/endpoint info.",
      "intent": "Create a consistent, documented, and accessible data source for both PoCs with predefined response times and basic schema awareness.",
      "inputs": [
        {
          "name": "Mock Data JSON Definition",
          "source_description": "Predefined recipe data structure and content",
          "details": "50 recipes in JSON format, including a version field (e.g., \"schema_version\": 1) per recipe object."
        },
        {
          "name": "Git Client",
          "source_description": "Version control system",
          "details": "Latest stable version"
        }
      ],
      "outputs": [
        {
          "name": "Mock Server Repository",
          "artifact_id": "worldchef_poc_mock_server",
          "expected_path": "git_remote_url/worldchef_poc_mock_server", // Updated
          "description": "Version-controlled local mock server with predefined recipe data, README documenting endpoints/port/CORS, and basic schema info.",
          "embed_annotations_required": true
        },
        {
          "name": "Mock Server README",
          "artifact_id": "worldchef_poc_mock_server_readme",
          "expected_path": "worldchef_poc_mock_server/README.md",
          "description": "Documents Base URL, endpoints, default port, configurable response time, CORS settings, and data schema version.",
          "embed_annotations_required": false
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_poc1_s1_003_0",
          "description": "Initialize Git repository locally for 'worldchef_poc_mock_server'.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": "Includes .gitignore."
        },
        {
          "item_id": "check_poc1_s1_003_1",
          "description": "Create mock data JSON file with 50 recipes, including a 'schema_version' field in each recipe.",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_mock_server/data/recipes.json",
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_003_2",
          "description": "Set up json-server (or equivalent like Express for more control) and configure it to serve the mock data.",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_mock_server/package.json", // or server.js
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_003_3",
          "description": "Configure response time middleware (e.g., to simulate 80-150ms latency).",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_mock_server/server.js", // if custom server
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_003_4",
          "description": "Configure basic CORS headers (e.g., allow all for localhost development, or specific origins if emulators require it).",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_mock_server/server.js", // if custom server
          "notes": "Test with emulators/simulators if they access via non-localhost IPs."
        },
        {
          "item_id": "check_poc1_s1_003_5",
          "description": "Test server response times and data serving.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_003_6",
          "description": "Document base URL (e.g., http://localhost:3000), endpoints, default port, response time config, CORS, and data schema version in README.md.",
          "status": "PENDING",
          "target_artifact_id": "worldchef_poc_mock_server/README.md",
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_003_7",
          "description": "Set up remote Git repository and push initial commit.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        }
      ],
      "dependencies": [], // Can start early
      "criticality": "HIGH",
      "status": "PENDING",
      "linked_issue_ids": [],
      "notes": []
    },
    {
      "id": "task_poc1_s1_004",
      "title": "Test Device & Simulator Configuration",
      "description": "Configure physical test devices and emulators/simulators for both platforms with detailed verification.",
      "intent": "Ensure consistent and correctly configured testing environments across both PoCs, including driver setup and OS versions.",
      "inputs": [
        {
          "name": "Physical Devices",
          "source_description": "Google Pixel 5 and iPhone 11",
          "details": "Android 12+ and iOS 15+ respectively"
        },
        {
          "name": "Host Machine OS and IDEs",
          "source_description": "Development machine(s)",
          "details": "With necessary drivers, Xcode, Android Studio."
        }
      ],
      "outputs": [
        {
          "name": "Device Configuration Guide",
          "artifact_id": "worldchef_poc_device_config",
          "expected_path": "docs/device_configuration.md",
          "description": "Detailed documentation of device setup, OS versions, driver installation, USB debugging, simulator versions, network simulation, and any required certificates/profiles.",
          "embed_annotations_required": true
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_poc1_s1_004_1",
          "description": "Configure Google Pixel 5 (Android 12+): Enable USB debugging, install vendor drivers on host, verify `adb devices` lists device.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_004_2",
          "description": "Configure iPhone 11 (iOS 15+): Ensure device is trusted by host, and can be targeted by Xcode.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_004_3",
          "description": "Set up Android emulator with target OS version (e.g., API 31 for Android 12).",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_004_4",
          "description": "Set up iOS simulator with target OS version (iOS 15). Install iOS 15 simulator runtime via Xcode if not present.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_004_5",
          "description": "Configure network simulation (e.g., 'Fast 3G' profile on devices/emulators or via tools like Charles/Proxyman). Document method.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_004_6",
          "description": "Generate or download necessary debug certificates/provisioning profiles for local device deployment if required (especially for iOS).",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": "PoC likely uses debug builds, but basic provisioning might be needed."
        },
        {
          "item_id": "check_poc1_s1_004_7",
          "description": "Document all setup steps, OS versions, and configurations in the Device Configuration Guide.",
          "status": "PENDING",
          "target_artifact_id": "docs/device_configuration.md",
          "notes": null
        }
      ],
      "dependencies": [], // Can be done in parallel
      "criticality": "HIGH",
      "status": "PENDING",
      "linked_issue_ids": [],
      "notes": []
    },
    {
      "id": "task_poc1_s1_005",
      "title": "AI Tooling Setup & Secure Configuration",
      "description": "Configure AI tooling, document prompting strategy and templates, and ensure secure API key management.",
      "intent": "Ensure consistent AI code generation approach with secure credential handling across both PoCs.",
      "inputs": [
        {
          "name": "AI Model Access Credentials",
          "source_description": "OpenAI API key for GPT-4-Turbo",
          "details": "Valid API key with sufficient quota."
        }
      ],
      "outputs": [
        {
          "name": "AI Tooling Guide",
          "artifact_id": "worldchef_poc_ai_tooling_guide", // Renamed for clarity
          "expected_path": "docs/ai_tooling_guide.md",
          "description": "Documentation of AI tooling setup, API key management, and base prompting strategy.",
          "embed_annotations_required": true
        },
        {
          "name": "AI Prompt Templates",
          "artifact_id": "worldchef_poc_ai_prompt_templates", // Added output for templates
          "expected_path": "docs/ai_prompt_templates.md",
          "description": "Reusable prompt templates for common PoC tasks.",
          "embed_annotations_required": true
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_poc1_s1_005_1",
          "description": "Configure OpenAI API access: Store API key securely (e.g., GitHub Actions secret `OPENAI_API_KEY`, local .env file gitignored).",
          "status": "PENDING",
          "target_artifact_id": null, // Secret storage mechanism
          "notes": "Document chosen method in ai_tooling_guide.md."
        },
        {
          "item_id": "check_poc1_s1_005_2",
          "description": "Document base prompting strategy (e.g., role, context, desired output format, temperature settings) in ai_tooling_guide.md.",
          "status": "PENDING",
          "target_artifact_id": "docs/ai_tooling_guide.md",
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_005_3",
          "description": "Create initial prompt templates for key PoC components (e.g., RecipeCard generation) in ai_prompt_templates.md.",
          "status": "PENDING",
          "target_artifact_id": "docs/ai_prompt_templates.md",
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_005_4",
          "description": "Test AI code generation for a sample component (e.g., basic Flutter widget scaffold) to verify setup and prompting strategy. Define quality metrics for this test.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": "Record latency and assess compliance with best practices for the sample."
        }
      ],
      "dependencies": [], // Can be done in parallel
      "criticality": "HIGH",
      "status": "PENDING",
      "linked_issue_ids": [],
      "notes": []
    },
    {
      "id": "task_poc1_s1_006",
      "title": "Time/Effort Tracking Setup & Guidance",
      "description": "Establish and document the mechanism for tracking time and effort, including defined data fields and ownership.",
      "intent": "Ensure accurate and consistent measurement of human oversight hours and AI generation time for comparative analysis.",
      "inputs": [],
      "outputs": [
        {
          "name": "Time Tracking Template",
          "artifact_id": "worldchef_poc_time_tracking_template", // Renamed for clarity
          "expected_path": "docs/time_tracking_template.xlsx",
          "description": "Excel template with defined columns for tracking time and effort.",
          "embed_annotations_required": true
        },
        {
          "name": "Time Tracking Guide",
          "artifact_id": "worldchef_poc_time_tracking_guide", // Added output
          "expected_path": "docs/time_tracking_guide.md",
          "description": "Documentation of tracking procedures, data fields, and responsibilities.",
          "embed_annotations_required": false
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_poc1_s1_006_1",
          "description": "Create time tracking template (Excel/Google Sheet) with columns: Date, Task ID/Name, Developer, Category (Flutter/RN/AI/General), Start Time, End Time, Duration (auto-calculated), AI API Calls (count), AI API Time (ms), AI Prompt Iteration Count, Human Intervention Type (Review/Debug/Optimize/Refactor/Direct Code), Notes.",
          "status": "PENDING",
          "target_artifact_id": "docs/time_tracking_template.xlsx",
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_006_2",
          "description": "Document tracking procedures in time_tracking_guide.md: Clarify who logs (each contributor), when (immediately after subtask/checklist item), and how to categorize effort.",
          "status": "PENDING",
          "target_artifact_id": "docs/time_tracking_guide.md",
          "notes": "Specify PM/Lead reconciliation process if any (e.g., weekly review)."
        },
        {
          "item_id": "check_poc1_s1_006_3",
          "description": "Test tracking mechanism: PoC Lead(s) perform a sample entry to ensure clarity and usability.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        }
      ],
      "dependencies": [], // Can be done in parallel
      "criticality": "MEDIUM",
      "status": "PENDING",
      "linked_issue_ids": [],
      "notes": []
    },
    {
      "id": "task_poc1_s1_007",
      "title": "Define Shared CI Template & Stage 1 Onboarding Document",
      "description": "Create a shared CI template/checklist for consistent CI steps across Flutter and RN PoCs. Develop a central Stage 1 onboarding document.",
      "intent": "Ensure fairness in CI comparison and provide a single point of reference for PoC setup.",
      "inputs": [],
      "outputs": [
        {
          "name": "Shared CI Template/Checklist",
          "artifact_id": "worldchef_poc_ci_template",
          "expected_path": "docs/ci_template_guidelines.md",
          "description": "Document outlining common CI steps (lint, analyze, unit tests, build) and validation criteria for both Flutter and RN.",
          "embed_annotations_required": false
        },
        {
          "name": "Stage 1 Onboarding Guide",
          "artifact_id": "worldchef_poc_stage1_onboarding_guide",
          "expected_path": "docs/stage1_onboarding_guide.md",
          "description": "High-level guide linking to all Stage 1 setup tasks, repositories, and key documentation artifacts.",
          "embed_annotations_required": false
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_poc1_s1_007_1",
          "description": "Define and document shared CI steps/goals (e.g., Lint/Analyze, Unit Tests (if stubs exist), Build/Bundle) in ci_template_guidelines.md.",
          "status": "DONE",
          "target_artifact_id": "docs/ci_template_guidelines.md",
          "notes": "Comprehensive CI template created with platform-specific requirements and validation criteria."
        },
        {
          "item_id": "check_poc1_s1_007_2",
          "description": "Create Stage 1 Onboarding Guide (stage1_onboarding_guide.md) with purpose, list of repos, and links to device config, AI tooling, time tracking guides, and mock server README.",
          "status": "DONE",
          "target_artifact_id": "docs/stage1_onboarding_guide.md",
          "notes": "Complete onboarding guide created with repository listings, documentation hub, and setup process overview."
        }
      ],
      "dependencies": [], // Can be done in parallel, but good to draft early
      "criticality": "MEDIUM",
      "status": "DONE",
      "linked_issue_ids": [],
      "notes": []
    },
    {
      "id": "task_poc1_s1_008",
      "title": "Integration Smoke Test",
      "description": "Perform a lightweight smoke test to ensure both initialized Flutter and React Native projects can successfully connect to and consume data from the mock server.",
      "intent": "Validate basic end-to-end connectivity of the setup components before detailed PoC feature development begins.",
      "inputs": [
        { "name": "Initialized Flutter Project", "source_description": "Output of Task 001", "details": "Functional project scaffold." },
        { "name": "Initialized React Native Project", "source_description": "Output of Task 002", "details": "Functional project scaffold." },
        { "name": "Operational Mock Server", "source_description": "Output of Task 003", "details": "Server running and serving data." }
      ],
      "outputs": [
        {
          "name": "Smoke Test Log/Report",
          "artifact_id": "worldchef_poc_smoke_test_report",
          "expected_path": "docs/smoke_test_report_stage1.md",
          "description": "Brief report confirming successful data fetch for both Flutter and RN from mock server.",
          "embed_annotations_required": false
        }
      ],
      "execution_checklist": [
        {
          "item_id": "check_poc1_s1_008_1",
          "description": "Launch mock server locally.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": null
        },
        {
          "item_id": "check_poc1_s1_008_2",
          "description": "In a fresh clone of the Flutter project, add minimal code to fetch from mock server's /recipes endpoint and log/print success or failure.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": "Confirm data is received."
        },
        {
          "item_id": "check_poc1_s1_008_3",
          "description": "In a fresh clone of the React Native project, add minimal code to fetch from mock server's /recipes endpoint and log/print success or failure.",
          "status": "PENDING",
          "target_artifact_id": null,
          "notes": "Confirm data is received."
        },
        {
          "item_id": "check_poc1_s1_008_4",
          "description": "Document results in smoke_test_report_stage1.md.",
          "status": "PENDING",
          "target_artifact_id": "docs/smoke_test_report_stage1.md",
          "notes": null
        }
      ],
      "dependencies": ["task_poc1_s1_001", "task_poc1_s1_002", "task_poc1_s1_003"], // Depends on projects and server being ready
      "criticality": "HIGH",
      "status": "PENDING",
      "linked_issue_ids": [],
      "notes": []
    }
  ]
}